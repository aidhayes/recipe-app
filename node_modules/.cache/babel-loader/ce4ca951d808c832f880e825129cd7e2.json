{"ast":null,"code":"import _objectSpread from \"/Users/aidan/recipe-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties2 from \"/Users/aidan/recipe-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport React__default, { useContext, useRef, useEffect, useCallback, createContext, useMemo, useState, useReducer } from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { Collapse, NavLink, Anchor, NavbarBrand } from 'react-bootstrap';\n\nfunction _extends$1() {\n  _extends$1 = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends$1.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose$1(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose$1(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nvar SelectableContext = /*#__PURE__*/React.createContext(null);\n\nvar makeEventKey = function makeEventKey(eventKey) {\n  var href = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  if (eventKey != null) return String(eventKey);\n  return href || null;\n};\n\nvar jsxRuntime = {\n  exports: {}\n};\nvar reactJsxRuntime_production_min = {};\n/** @license React v16.14.0\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar f = React__default,\n    g = 60103;\nreactJsxRuntime_production_min.Fragment = 60107;\n\nif (\"function\" === typeof Symbol && Symbol.for) {\n  var h = Symbol.for;\n  g = h(\"react.element\");\n  reactJsxRuntime_production_min.Fragment = h(\"react.fragment\");\n}\n\nvar m = f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,\n    n = Object.prototype.hasOwnProperty,\n    p = {\n  key: !0,\n  ref: !0,\n  __self: !0,\n  __source: !0\n};\n\nfunction q(c, a, k) {\n  var b,\n      d = {},\n      e = null,\n      l = null;\n  void 0 !== k && (e = \"\" + k);\n  void 0 !== a.key && (e = \"\" + a.key);\n  void 0 !== a.ref && (l = a.ref);\n\n  for (b in a) {\n    n.call(a, b) && !p.hasOwnProperty(b) && (d[b] = a[b]);\n  }\n\n  if (c && c.defaultProps) for (b in a = c.defaultProps, a) {\n    void 0 === d[b] && (d[b] = a[b]);\n  }\n  return {\n    $$typeof: g,\n    type: c,\n    key: e,\n    ref: l,\n    props: d,\n    _owner: m.current\n  };\n}\n\nreactJsxRuntime_production_min.jsx = q;\nreactJsxRuntime_production_min.jsxs = q;\nvar reactJsxRuntime_development = {};\n/** @license React v16.14.0\n * react-jsx-runtime.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n(function (exports) {\n  if (process.env.NODE_ENV !== \"production\") {\n    (function () {\n      var React = React__default; // ATTENTION\n      // When adding new symbols to this file,\n      // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n      // The Symbol used to tag the ReactElement-like types. If there is no native Symbol\n      // nor polyfill, then a plain number is used for performance.\n\n      var REACT_ELEMENT_TYPE = 0xeac7;\n      var REACT_PORTAL_TYPE = 0xeaca;\n      exports.Fragment = 0xeacb;\n      var REACT_STRICT_MODE_TYPE = 0xeacc;\n      var REACT_PROFILER_TYPE = 0xead2;\n      var REACT_PROVIDER_TYPE = 0xeacd;\n      var REACT_CONTEXT_TYPE = 0xeace;\n      var REACT_FORWARD_REF_TYPE = 0xead0;\n      var REACT_SUSPENSE_TYPE = 0xead1;\n      var REACT_SUSPENSE_LIST_TYPE = 0xead8;\n      var REACT_MEMO_TYPE = 0xead3;\n      var REACT_LAZY_TYPE = 0xead4;\n      var REACT_BLOCK_TYPE = 0xead9;\n      var REACT_SERVER_BLOCK_TYPE = 0xeada;\n      var REACT_FUNDAMENTAL_TYPE = 0xead5;\n      var REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;\n      var REACT_LEGACY_HIDDEN_TYPE = 0xeae3;\n\n      if (typeof Symbol === 'function' && Symbol.for) {\n        var symbolFor = Symbol.for;\n        REACT_ELEMENT_TYPE = symbolFor('react.element');\n        REACT_PORTAL_TYPE = symbolFor('react.portal');\n        exports.Fragment = symbolFor('react.fragment');\n        REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');\n        REACT_PROFILER_TYPE = symbolFor('react.profiler');\n        REACT_PROVIDER_TYPE = symbolFor('react.provider');\n        REACT_CONTEXT_TYPE = symbolFor('react.context');\n        REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');\n        REACT_SUSPENSE_TYPE = symbolFor('react.suspense');\n        REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');\n        REACT_MEMO_TYPE = symbolFor('react.memo');\n        REACT_LAZY_TYPE = symbolFor('react.lazy');\n        REACT_BLOCK_TYPE = symbolFor('react.block');\n        REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');\n        REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');\n        symbolFor('react.scope');\n        symbolFor('react.opaque.id');\n        REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');\n        symbolFor('react.offscreen');\n        REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');\n      }\n\n      var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\n      var FAUX_ITERATOR_SYMBOL = '@@iterator';\n\n      function getIteratorFn(maybeIterable) {\n        if (maybeIterable === null || typeof maybeIterable !== 'object') {\n          return null;\n        }\n\n        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n        if (typeof maybeIterator === 'function') {\n          return maybeIterator;\n        }\n\n        return null;\n      }\n\n      var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\n      function error(format) {\n        {\n          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n            args[_key2 - 1] = arguments[_key2];\n          }\n\n          printWarning('error', format, args);\n        }\n      }\n\n      function printWarning(level, format, args) {\n        // When changing this logic, you might want to also\n        // update consoleWithStackDev.www.js as well.\n        {\n          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n          var stack = '';\n\n          if (currentlyValidatingElement) {\n            var name = getComponentName(currentlyValidatingElement.type);\n            var owner = currentlyValidatingElement._owner;\n            stack += describeComponentFrame(name, currentlyValidatingElement._source, owner && getComponentName(owner.type));\n          }\n\n          stack += ReactDebugCurrentFrame.getStackAddendum();\n\n          if (stack !== '') {\n            format += '%s';\n            args = args.concat([stack]);\n          }\n\n          var argsWithFormat = args.map(function (item) {\n            return '' + item;\n          }); // Careful: RN currently depends on this prefix\n\n          argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n          // breaks IE9: https://github.com/facebook/react/issues/13610\n          // eslint-disable-next-line react-internal/no-production-logging\n\n          Function.prototype.apply.call(console[level], console, argsWithFormat);\n        }\n      } // Filter certain DOM attributes (e.g. src, href) if their values are empty strings.\n\n\n      var enableScopeAPI = false; // Experimental Create Event Handle API.\n\n      function isValidElementType(type) {\n        if (typeof type === 'string' || typeof type === 'function') {\n          return true;\n        } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n\n\n        if (type === exports.Fragment || type === REACT_PROFILER_TYPE || type === REACT_DEBUG_TRACING_MODE_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) {\n          return true;\n        }\n\n        if (typeof type === 'object' && type !== null) {\n          if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {\n            return true;\n          }\n        }\n\n        return false;\n      }\n\n      var BEFORE_SLASH_RE = /^(.*)[\\\\\\/]/;\n\n      function describeComponentFrame(name, source, ownerName) {\n        var sourceInfo = '';\n\n        if (source) {\n          var path = source.fileName;\n          var fileName = path.replace(BEFORE_SLASH_RE, '');\n          {\n            // In DEV, include code for a common special case:\n            // prefer \"folder/index.js\" instead of just \"index.js\".\n            if (/^index\\./.test(fileName)) {\n              var match = path.match(BEFORE_SLASH_RE);\n\n              if (match) {\n                var pathBeforeSlash = match[1];\n\n                if (pathBeforeSlash) {\n                  var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');\n                  fileName = folderName + '/' + fileName;\n                }\n              }\n            }\n          }\n          sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';\n        } else if (ownerName) {\n          sourceInfo = ' (created by ' + ownerName + ')';\n        }\n\n        return '\\n    in ' + (name || 'Unknown') + sourceInfo;\n      }\n\n      var Resolved = 1;\n\n      function refineResolvedLazyComponent(lazyComponent) {\n        return lazyComponent._status === Resolved ? lazyComponent._result : null;\n      }\n\n      function getWrappedName(outerType, innerType, wrapperName) {\n        var functionName = innerType.displayName || innerType.name || '';\n        return outerType.displayName || (functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName);\n      }\n\n      function getComponentName(type) {\n        if (type == null) {\n          // Host root, text node or just invalid type.\n          return null;\n        }\n\n        {\n          if (typeof type.tag === 'number') {\n            error('Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');\n          }\n        }\n\n        if (typeof type === 'function') {\n          return type.displayName || type.name || null;\n        }\n\n        if (typeof type === 'string') {\n          return type;\n        }\n\n        switch (type) {\n          case exports.Fragment:\n            return 'Fragment';\n\n          case REACT_PORTAL_TYPE:\n            return 'Portal';\n\n          case REACT_PROFILER_TYPE:\n            return \"Profiler\";\n\n          case REACT_STRICT_MODE_TYPE:\n            return 'StrictMode';\n\n          case REACT_SUSPENSE_TYPE:\n            return 'Suspense';\n\n          case REACT_SUSPENSE_LIST_TYPE:\n            return 'SuspenseList';\n        }\n\n        if (typeof type === 'object') {\n          switch (type.$$typeof) {\n            case REACT_CONTEXT_TYPE:\n              return 'Context.Consumer';\n\n            case REACT_PROVIDER_TYPE:\n              return 'Context.Provider';\n\n            case REACT_FORWARD_REF_TYPE:\n              return getWrappedName(type, type.render, 'ForwardRef');\n\n            case REACT_MEMO_TYPE:\n              return getComponentName(type.type);\n\n            case REACT_BLOCK_TYPE:\n              return getComponentName(type.render);\n\n            case REACT_LAZY_TYPE:\n              {\n                var thenable = type;\n                var resolvedThenable = refineResolvedLazyComponent(thenable);\n\n                if (resolvedThenable) {\n                  return getComponentName(resolvedThenable);\n                }\n\n                break;\n              }\n          }\n        }\n\n        return null;\n      }\n\n      var loggedTypeFailures = {};\n      ReactSharedInternals.ReactDebugCurrentFrame;\n      var currentlyValidatingElement = null;\n\n      function setCurrentlyValidatingElement(element) {\n        {\n          currentlyValidatingElement = element;\n        }\n      }\n\n      function checkPropTypes(typeSpecs, values, location, componentName, element) {\n        {\n          // $FlowFixMe This is okay but Flow doesn't know it.\n          var has = Function.call.bind(Object.prototype.hasOwnProperty);\n\n          for (var typeSpecName in typeSpecs) {\n            if (has(typeSpecs, typeSpecName)) {\n              var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n              // fail the render phase where it didn't fail before. So we log it.\n              // After these have been cleaned up, we'll let them throw.\n\n              try {\n                // This is intentionally an invariant that gets caught. It's the same\n                // behavior as without this statement except with a better message.\n                if (typeof typeSpecs[typeSpecName] !== 'function') {\n                  var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');\n                  err.name = 'Invariant Violation';\n                  throw err;\n                }\n\n                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');\n              } catch (ex) {\n                error$1 = ex;\n              }\n\n              if (error$1 && !(error$1 instanceof Error)) {\n                setCurrentlyValidatingElement(element);\n                error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);\n                setCurrentlyValidatingElement(null);\n              }\n\n              if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n                // Only monitor this failure once because there tends to be a lot of the\n                // same error.\n                loggedTypeFailures[error$1.message] = true;\n                setCurrentlyValidatingElement(element);\n                error('Failed %s type: %s', location, error$1.message);\n                setCurrentlyValidatingElement(null);\n              }\n            }\n          }\n        }\n      }\n\n      var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\n      var hasOwnProperty = Object.prototype.hasOwnProperty;\n      var RESERVED_PROPS = {\n        key: true,\n        ref: true,\n        __self: true,\n        __source: true\n      };\n      var specialPropKeyWarningShown;\n      var specialPropRefWarningShown;\n      var didWarnAboutStringRefs;\n      {\n        didWarnAboutStringRefs = {};\n      }\n\n      function hasValidRef(config) {\n        {\n          if (hasOwnProperty.call(config, 'ref')) {\n            var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n\n            if (getter && getter.isReactWarning) {\n              return false;\n            }\n          }\n        }\n        return config.ref !== undefined;\n      }\n\n      function hasValidKey(config) {\n        {\n          if (hasOwnProperty.call(config, 'key')) {\n            var getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n\n            if (getter && getter.isReactWarning) {\n              return false;\n            }\n          }\n        }\n        return config.key !== undefined;\n      }\n\n      function warnIfStringRefCannotBeAutoConverted(config, self) {\n        {\n          if (typeof config.ref === 'string' && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {\n            var componentName = getComponentName(ReactCurrentOwner.current.type);\n\n            if (!didWarnAboutStringRefs[componentName]) {\n              error('Component \"%s\" contains the string ref \"%s\". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', getComponentName(ReactCurrentOwner.current.type), config.ref);\n              didWarnAboutStringRefs[componentName] = true;\n            }\n          }\n        }\n      }\n\n      function defineKeyPropWarningGetter(props, displayName) {\n        {\n          var warnAboutAccessingKey = function warnAboutAccessingKey() {\n            if (!specialPropKeyWarningShown) {\n              specialPropKeyWarningShown = true;\n              error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n            }\n          };\n\n          warnAboutAccessingKey.isReactWarning = true;\n          Object.defineProperty(props, 'key', {\n            get: warnAboutAccessingKey,\n            configurable: true\n          });\n        }\n      }\n\n      function defineRefPropWarningGetter(props, displayName) {\n        {\n          var warnAboutAccessingRef = function warnAboutAccessingRef() {\n            if (!specialPropRefWarningShown) {\n              specialPropRefWarningShown = true;\n              error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n            }\n          };\n\n          warnAboutAccessingRef.isReactWarning = true;\n          Object.defineProperty(props, 'ref', {\n            get: warnAboutAccessingRef,\n            configurable: true\n          });\n        }\n      }\n      /**\n       * Factory method to create a new React element. This no longer adheres to\n       * the class pattern, so do not use new to call it. Also, instanceof check\n       * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n       * if something is a React Element.\n       *\n       * @param {*} type\n       * @param {*} props\n       * @param {*} key\n       * @param {string|object} ref\n       * @param {*} owner\n       * @param {*} self A *temporary* helper to detect places where `this` is\n       * different from the `owner` when React.createElement is called, so that we\n       * can warn. We want to get rid of owner and replace string `ref`s with arrow\n       * functions, and as long as `this` and owner are the same, there will be no\n       * change in behavior.\n       * @param {*} source An annotation object (added by a transpiler or otherwise)\n       * indicating filename, line number, and/or other information.\n       * @internal\n       */\n\n\n      var ReactElement = function ReactElement(type, key, ref, self, source, owner, props) {\n        var element = {\n          // This tag allows us to uniquely identify this as a React Element\n          $$typeof: REACT_ELEMENT_TYPE,\n          // Built-in properties that belong on the element\n          type: type,\n          key: key,\n          ref: ref,\n          props: props,\n          // Record the component responsible for creating this element.\n          _owner: owner\n        };\n        {\n          // The validation flag is currently mutative. We put it on\n          // an external backing store so that we can freeze the whole object.\n          // This can be replaced with a WeakMap once they are implemented in\n          // commonly used development environments.\n          element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n          // the validation flag non-enumerable (where possible, which should\n          // include every environment we run tests in), so the test framework\n          // ignores it.\n\n          Object.defineProperty(element._store, 'validated', {\n            configurable: false,\n            enumerable: false,\n            writable: true,\n            value: false\n          }); // self and source are DEV only properties.\n\n          Object.defineProperty(element, '_self', {\n            configurable: false,\n            enumerable: false,\n            writable: false,\n            value: self\n          }); // Two elements created in two different places should be considered\n          // equal for testing purposes and therefore we hide it from enumeration.\n\n          Object.defineProperty(element, '_source', {\n            configurable: false,\n            enumerable: false,\n            writable: false,\n            value: source\n          });\n\n          if (Object.freeze) {\n            Object.freeze(element.props);\n            Object.freeze(element);\n          }\n        }\n        return element;\n      };\n      /**\n       * https://github.com/reactjs/rfcs/pull/107\n       * @param {*} type\n       * @param {object} props\n       * @param {string} key\n       */\n\n\n      function jsxDEV(type, config, maybeKey, source, self) {\n        {\n          var propName; // Reserved names are extracted\n\n          var props = {};\n          var key = null;\n          var ref = null; // Currently, key can be spread in as a prop. This causes a potential\n          // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n          // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n          // but as an intermediary step, we will use jsxDEV for everything except\n          // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n          // key is explicitly declared to be undefined or not.\n\n          if (maybeKey !== undefined) {\n            key = '' + maybeKey;\n          }\n\n          if (hasValidKey(config)) {\n            key = '' + config.key;\n          }\n\n          if (hasValidRef(config)) {\n            ref = config.ref;\n            warnIfStringRefCannotBeAutoConverted(config, self);\n          } // Remaining properties are added to a new props object\n\n\n          for (propName in config) {\n            if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n              props[propName] = config[propName];\n            }\n          } // Resolve default props\n\n\n          if (type && type.defaultProps) {\n            var defaultProps = type.defaultProps;\n\n            for (propName in defaultProps) {\n              if (props[propName] === undefined) {\n                props[propName] = defaultProps[propName];\n              }\n            }\n          }\n\n          if (key || ref) {\n            var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\n\n            if (key) {\n              defineKeyPropWarningGetter(props, displayName);\n            }\n\n            if (ref) {\n              defineRefPropWarningGetter(props, displayName);\n            }\n          }\n\n          return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\n        }\n      }\n\n      var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;\n      ReactSharedInternals.ReactDebugCurrentFrame;\n\n      function setCurrentlyValidatingElement$1(element) {\n        currentlyValidatingElement = element;\n      }\n\n      var propTypesMisspellWarningShown;\n      {\n        propTypesMisspellWarningShown = false;\n      }\n      /**\n       * Verifies the object is a ReactElement.\n       * See https://reactjs.org/docs/react-api.html#isvalidelement\n       * @param {?object} object\n       * @return {boolean} True if `object` is a ReactElement.\n       * @final\n       */\n\n      function isValidElement(object) {\n        {\n          return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n        }\n      }\n\n      function getDeclarationErrorAddendum() {\n        {\n          if (ReactCurrentOwner$1.current) {\n            var name = getComponentName(ReactCurrentOwner$1.current.type);\n\n            if (name) {\n              return '\\n\\nCheck the render method of `' + name + '`.';\n            }\n          }\n\n          return '';\n        }\n      }\n\n      function getSourceInfoErrorAddendum(source) {\n        {\n          if (source !== undefined) {\n            var fileName = source.fileName.replace(/^.*[\\\\\\/]/, '');\n            var lineNumber = source.lineNumber;\n            return '\\n\\nCheck your code at ' + fileName + ':' + lineNumber + '.';\n          }\n\n          return '';\n        }\n      }\n      /**\n       * Warn if there's no key explicitly set on dynamic arrays of children or\n       * object keys are not valid. This allows us to keep track of children between\n       * updates.\n       */\n\n\n      var ownerHasKeyUseWarning = {};\n\n      function getCurrentComponentErrorInfo(parentType) {\n        {\n          var info = getDeclarationErrorAddendum();\n\n          if (!info) {\n            var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;\n\n            if (parentName) {\n              info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n            }\n          }\n\n          return info;\n        }\n      }\n      /**\n       * Warn if the element doesn't have an explicit key assigned to it.\n       * This element is in an array. The array could grow and shrink or be\n       * reordered. All children that haven't already been validated are required to\n       * have a \"key\" property assigned to it. Error statuses are cached so a warning\n       * will only be shown once.\n       *\n       * @internal\n       * @param {ReactElement} element Element that requires a key.\n       * @param {*} parentType element's parent's type.\n       */\n\n\n      function validateExplicitKey(element, parentType) {\n        {\n          if (!element._store || element._store.validated || element.key != null) {\n            return;\n          }\n\n          element._store.validated = true;\n          var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n\n          if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n            return;\n          }\n\n          ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n          // property, it may be the creator of the child that's responsible for\n          // assigning it a key.\n\n          var childOwner = '';\n\n          if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {\n            // Give the component that originally created this child.\n            childOwner = \" It was passed a child from \" + getComponentName(element._owner.type) + \".\";\n          }\n\n          setCurrentlyValidatingElement$1(element);\n          error('Each child in a list should have a unique \"key\" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);\n          setCurrentlyValidatingElement$1(null);\n        }\n      }\n      /**\n       * Ensure that every element either is passed in a static location, in an\n       * array with an explicit keys property defined, or in an object literal\n       * with valid key property.\n       *\n       * @internal\n       * @param {ReactNode} node Statically passed child of any type.\n       * @param {*} parentType node's parent's type.\n       */\n\n\n      function validateChildKeys(node, parentType) {\n        {\n          if (typeof node !== 'object') {\n            return;\n          }\n\n          if (Array.isArray(node)) {\n            for (var i = 0; i < node.length; i++) {\n              var child = node[i];\n\n              if (isValidElement(child)) {\n                validateExplicitKey(child, parentType);\n              }\n            }\n          } else if (isValidElement(node)) {\n            // This element was passed in a valid location.\n            if (node._store) {\n              node._store.validated = true;\n            }\n          } else if (node) {\n            var iteratorFn = getIteratorFn(node);\n\n            if (typeof iteratorFn === 'function') {\n              // Entry iterators used to provide implicit keys,\n              // but now we print a separate warning for them later.\n              if (iteratorFn !== node.entries) {\n                var iterator = iteratorFn.call(node);\n                var step;\n\n                while (!(step = iterator.next()).done) {\n                  if (isValidElement(step.value)) {\n                    validateExplicitKey(step.value, parentType);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      /**\n       * Given an element, validate that its props follow the propTypes definition,\n       * provided by the type.\n       *\n       * @param {ReactElement} element\n       */\n\n\n      function validatePropTypes(element) {\n        {\n          var type = element.type;\n\n          if (type === null || type === undefined || typeof type === 'string') {\n            return;\n          }\n\n          var propTypes;\n\n          if (typeof type === 'function') {\n            propTypes = type.propTypes;\n          } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.\n          // Inner props are checked in the reconciler.\n          type.$$typeof === REACT_MEMO_TYPE)) {\n            propTypes = type.propTypes;\n          } else {\n            return;\n          }\n\n          if (propTypes) {\n            // Intentionally inside to avoid triggering lazy initializers:\n            var name = getComponentName(type);\n            checkPropTypes(propTypes, element.props, 'prop', name, element);\n          } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\n            propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:\n\n            var _name = getComponentName(type);\n\n            error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');\n          }\n\n          if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {\n            error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');\n          }\n        }\n      }\n      /**\n       * Given a fragment, validate that it can only be provided with fragment props\n       * @param {ReactElement} fragment\n       */\n\n\n      function validateFragmentProps(fragment) {\n        {\n          var keys = Object.keys(fragment.props);\n\n          for (var i = 0; i < keys.length; i++) {\n            var key = keys[i];\n\n            if (key !== 'children' && key !== 'key') {\n              setCurrentlyValidatingElement$1(fragment);\n              error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);\n              setCurrentlyValidatingElement$1(null);\n              break;\n            }\n          }\n\n          if (fragment.ref !== null) {\n            setCurrentlyValidatingElement$1(fragment);\n            error('Invalid attribute `ref` supplied to `React.Fragment`.');\n            setCurrentlyValidatingElement$1(null);\n          }\n        }\n      }\n\n      function jsxWithValidation(type, props, key, isStaticChildren, source, self) {\n        {\n          var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to\n          // succeed and there will likely be errors in render.\n\n          if (!validType) {\n            var info = '';\n\n            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n              info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\n            }\n\n            var sourceInfo = getSourceInfoErrorAddendum(source);\n\n            if (sourceInfo) {\n              info += sourceInfo;\n            } else {\n              info += getDeclarationErrorAddendum();\n            }\n\n            var typeString;\n\n            if (type === null) {\n              typeString = 'null';\n            } else if (Array.isArray(type)) {\n              typeString = 'array';\n            } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n              typeString = \"<\" + (getComponentName(type.type) || 'Unknown') + \" />\";\n              info = ' Did you accidentally export a JSX literal instead of a component?';\n            } else {\n              typeString = typeof type;\n            }\n\n            error('React.jsx: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);\n          }\n\n          var element = jsxDEV(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.\n          // TODO: Drop this when these are no longer allowed as the type argument.\n\n          if (element == null) {\n            return element;\n          } // Skip key warning if the type isn't valid since our key validation logic\n          // doesn't expect a non-string/function type and can throw confusing errors.\n          // We don't want exception behavior to differ between dev and prod.\n          // (Rendering will throw with a helpful message and as soon as the type is\n          // fixed, the key warnings will appear.)\n\n\n          if (validType) {\n            var children = props.children;\n\n            if (children !== undefined) {\n              if (isStaticChildren) {\n                if (Array.isArray(children)) {\n                  for (var i = 0; i < children.length; i++) {\n                    validateChildKeys(children[i], type);\n                  }\n\n                  if (Object.freeze) {\n                    Object.freeze(children);\n                  }\n                } else {\n                  error('React.jsx: Static children should always be an array. ' + 'You are likely explicitly calling React.jsxs or React.jsxDEV. ' + 'Use the Babel transform instead.');\n                }\n              } else {\n                validateChildKeys(children, type);\n              }\n            }\n          }\n\n          if (type === exports.Fragment) {\n            validateFragmentProps(element);\n          } else {\n            validatePropTypes(element);\n          }\n\n          return element;\n        }\n      } // These two functions exist to still get child warnings in dev\n      // even with the prod transform. This means that jsxDEV is purely\n      // opt-in behavior for better messages but that we won't stop\n      // giving you warnings if you use production apis.\n\n\n      function jsxWithValidationStatic(type, props, key) {\n        {\n          return jsxWithValidation(type, props, key, true);\n        }\n      }\n\n      function jsxWithValidationDynamic(type, props, key) {\n        {\n          return jsxWithValidation(type, props, key, false);\n        }\n      }\n\n      var jsx = jsxWithValidationDynamic; // we may want to special case jsxs internally to take advantage of static children.\n      // for now we can ship identical prod functions\n\n      var jsxs = jsxWithValidationStatic;\n      exports.jsx = jsx;\n      exports.jsxs = jsxs;\n    })();\n  }\n})(reactJsxRuntime_development);\n\nif (process.env.NODE_ENV === 'production') {\n  jsxRuntime.exports = reactJsxRuntime_production_min;\n} else {\n  jsxRuntime.exports = reactJsxRuntime_development;\n}\n\nvar DEFAULT_BREAKPOINTS = ['xxl', 'xl', 'lg', 'md', 'sm', 'xs'];\nvar ThemeContext = /*#__PURE__*/React.createContext({\n  prefixes: {},\n  breakpoints: DEFAULT_BREAKPOINTS\n});\n\nfunction useBootstrapPrefix(prefix, defaultPrefix) {\n  var _useContext3 = useContext(ThemeContext),\n      prefixes = _useContext3.prefixes;\n\n  return prefix || prefixes[defaultPrefix] || defaultPrefix;\n}\n/**\n * Creates a `Ref` whose value is updated in an effect, ensuring the most recent\n * value is the one rendered with. Generally only required for Concurrent mode usage\n * where previous work in `render()` may be discarded before being used.\n *\n * This is safe to access in an event handler.\n *\n * @param value The `Ref` value\n */\n\n\nfunction useCommittedRef(value) {\n  var ref = useRef(value);\n  useEffect(function () {\n    ref.current = value;\n  }, [value]);\n  return ref;\n}\n\nfunction useEventCallback(fn) {\n  var ref = useCommittedRef(fn);\n  return useCallback(function () {\n    return ref.current && ref.current.apply(ref, arguments);\n  }, [ref]);\n}\n\nvar SidebarMenuContext = /*#__PURE__*/createContext({});\nvar _excluded$b = [\"as\", \"children\", \"onClick\", \"bsPrefix\", \"className\", \"label\"];\nvar propTypes$5 = {\n  /** @default 'sidebar-menu-toggler' */\n  bsPrefix: PropTypes.string,\n\n  /** An accessible ARIA label for the toggler button. */\n  label: PropTypes.string,\n\n  /** @private */\n  onClick: PropTypes.func,\n\n  /**\n   * The toggle content. When empty, the default toggle will be rendered.\n   */\n  children: PropTypes.node,\n  as: PropTypes.elementType,\n  className: PropTypes.string\n};\nvar defaultProps$4 = {\n  label: 'Toggle navigation'\n};\nvar SidebarMenuToggle = /*#__PURE__*/React__default.forwardRef(function (_ref, ref) {\n  var _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'button' : _ref$as,\n      children = _ref.children,\n      onClick = _ref.onClick,\n      bsPrefix = _ref.bsPrefix,\n      className = _ref.className,\n      label = _ref.label,\n      props = _objectWithoutProperties(_ref, _excluded$b);\n\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'sidebar-menu-toggle');\n\n  var _ref2 = useContext(SidebarMenuContext) || {},\n      onToggle = _ref2.onToggle,\n      expanded = _ref2.expanded;\n\n  var handleOnClick = useEventCallback(function (e) {\n    onClick === null || onClick === void 0 ? void 0 : onClick(e);\n    onToggle === null || onToggle === void 0 ? void 0 : onToggle();\n  });\n\n  if (Component === 'button') {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    props.type = 'button';\n  }\n\n  return /*#__PURE__*/React__default.createElement(Component, _extends$1({\n    ref: ref\n  }, props, {\n    onClick: handleOnClick,\n    className: classNames(className, bsPrefix, !expanded && 'collapsed'),\n    \"aria-label\": label\n  }), children || /*#__PURE__*/React__default.createElement(\"span\", {\n    className: \"\".concat(bsPrefix, \"-icon\")\n  }));\n});\nSidebarMenuToggle.displayName = \"SidebarMenuToggler\";\nSidebarMenuToggle.propTypes = propTypes$5;\nSidebarMenuToggle.defaultProps = defaultProps$4;\n/**\n * Safe chained function\n *\n * Will only create a new function if needed,\n * otherwise will pass back existing functions or null.\n *\n * @param {function} functions to chain\n * @returns {function|null}\n */\n\nfunction createChainedFunction() {\n  for (var _len3 = arguments.length, funcs = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    funcs[_key3] = arguments[_key3];\n  }\n\n  return funcs.filter(function (f) {\n    return f != null;\n  }).reduce(function (acc, f) {\n    if (typeof f !== 'function') {\n      throw new Error('Invalid Argument Type, must only provide functions, undefined, or null.');\n    }\n\n    if (acc === null) return f;\n    return function chainedFunction() {\n      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n\n      // @ts-ignore\n      acc.apply(this, args); // @ts-ignore\n\n      f.apply(this, args);\n    };\n  }, null);\n}\n\nvar _excluded$a = [\"dimension\", \"getScrollValue\", \"children\", \"onEntering\", \"className\", \"bsPrefix\"];\nvar SidebarMenuCollapse = /*#__PURE__*/React__default.forwardRef(function (_ref, ref) {\n  var _ref$dimension = _ref.dimension,\n      dimension = _ref$dimension === void 0 ? 'width' : _ref$dimension,\n      _ref$getScrollValue = _ref.getScrollValue,\n      getScrollValue = _ref$getScrollValue === void 0 ? function () {\n    return 300;\n  } : _ref$getScrollValue,\n      children = _ref.children,\n      onEntering = _ref.onEntering,\n      className = _ref.className,\n      initialBsPrefix = _ref.bsPrefix,\n      props = _objectWithoutProperties(_ref, _excluded$a);\n\n  var computedDimension = typeof dimension === 'function' ? dimension() : dimension;\n  var sidebarMenuContext = useContext(SidebarMenuContext);\n  var bsPrefix = useBootstrapPrefix(initialBsPrefix, 'sidebar-menu-collapse');\n  var handleEntering = useMemo(function () {\n    return createChainedFunction(function (elem) {\n      if (typeof getScrollValue === 'function') {\n        var scrollValue = getScrollValue(elem);\n        elem.style[computedDimension] = typeof scrollValue === 'string' ? scrollValue : \"\".concat(scrollValue, \"px\");\n      } else if (typeof getScrollValue === 'number') {\n        elem.style[computedDimension] = \"\".concat(getScrollValue, \"px\");\n      } else if (typeof getScrollValue === 'string') {\n        elem.style[computedDimension] = getScrollValue;\n      }\n    }, onEntering);\n  }, [computedDimension, getScrollValue, onEntering]);\n  return /*#__PURE__*/React__default.createElement(Collapse, _extends$1({}, props, {\n    dimension: dimension,\n    onEntering: handleEntering,\n    \"in\": !!(sidebarMenuContext !== null && sidebarMenuContext !== void 0 && sidebarMenuContext.expanded)\n  }), /*#__PURE__*/React__default.createElement(\"div\", {\n    ref: ref,\n    className: classNames(className, bsPrefix)\n  }, children));\n});\nSidebarMenuCollapse.displayName = \"SidebarMenuCollapse\";\nSidebarMenuCollapse.propTypes = Collapse.propTypes;\nvar NavContext = /*#__PURE__*/React.createContext(null);\nNavContext.displayName = 'NavContext';\nvar SidebarMenuNodeContext = /*#__PURE__*/React.createContext({});\n/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\nvar __DEV__ = process.env.NODE_ENV !== 'production';\n\nvar warning = function warning() {};\n\nif (__DEV__) {\n  var printWarning = function printWarning(format, args) {\n    var len = arguments.length;\n    args = new Array(len > 1 ? len - 1 : 0);\n\n    for (var key = 1; key < len; key++) {\n      args[key - 1] = arguments[key];\n    }\n\n    var argIndex = 0;\n    var message = 'Warning: ' + format.replace(/%s/g, function () {\n      return args[argIndex++];\n    });\n\n    if (typeof console !== 'undefined') {\n      console.error(message);\n    }\n\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) {}\n  };\n\n  warning = function warning(condition, format, args) {\n    var len = arguments.length;\n    args = new Array(len > 2 ? len - 2 : 0);\n\n    for (var key = 2; key < len; key++) {\n      args[key - 2] = arguments[key];\n    }\n\n    if (format === undefined) {\n      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');\n    }\n\n    if (!condition) {\n      printWarning.apply(null, [format].concat(args));\n    }\n  };\n}\n\nvar warning_1 = warning;\nvar _excluded$9 = [\"active\", \"className\", \"eventKey\", \"onSelect\", \"onClick\", \"as\"];\nvar propTypes$4 = {\n  id: PropTypes.string,\n  active: PropTypes.bool,\n  role: PropTypes.string,\n  href: PropTypes.string,\n  tabIndex: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  eventKey: PropTypes.any,\n  as: PropTypes.any,\n  onClick: PropTypes.func,\n  onSelect: PropTypes.func,\n  'aria-controls': PropTypes.string\n};\nvar defaultProps$3 = {\n  disabled: false\n};\nvar BaseNavItem = /*#__PURE__*/React__default.forwardRef(function (_ref, ref) {\n  var active = _ref.active,\n      className = _ref.className,\n      eventKey = _ref.eventKey,\n      onSelect = _ref.onSelect,\n      onClick = _ref.onClick,\n      Component = _ref.as,\n      props = _objectWithoutProperties(_ref, _excluded$9);\n\n  var navKey = makeEventKey(eventKey, props.href);\n  var parentOnSelect = useContext(SelectableContext);\n  var navContext = useContext(NavContext);\n  var isActive = active;\n\n  if (navContext) {\n    if (!props.role && navContext.role === 'tablist') props.role = 'tab';\n    var contextControllerId = navContext.getControllerId(navKey);\n    var contextControlledId = navContext.getControlledId(navKey);\n    warning_1(!contextControllerId || !props.id, \"[react-bootstrap] The provided id '\".concat(props.id, \"' was overwritten by the current navContext with '\").concat(contextControllerId, \"'.\"));\n    warning_1(!contextControlledId || !props['aria-controls'], \"[react-bootstrap] The provided aria-controls value '\".concat(props['aria-controls'], \"' was overwritten by the current navContext with '\").concat(contextControlledId, \"'.\"));\n    props['data-rb-event-key'] = navKey;\n    props.id = contextControllerId || props.id;\n    props['aria-controls'] = contextControlledId || props['aria-controls'];\n    isActive = active == null && navKey != null ? navContext.activeKey === navKey : active;\n  }\n\n  var handleOnClick = useEventCallback(function (event) {\n    onClick === null || onClick === void 0 ? void 0 : onClick(event);\n\n    if (navKey == null) {\n      return;\n    }\n\n    onSelect === null || onSelect === void 0 ? void 0 : onSelect(navKey, event);\n    parentOnSelect === null || parentOnSelect === void 0 ? void 0 : parentOnSelect(navKey, event);\n  });\n  return /*#__PURE__*/React__default.createElement(Component, _extends$1({}, props, {\n    ref: ref,\n    onClick: handleOnClick,\n    className: classNames(className, isActive && 'active')\n  }));\n});\nBaseNavItem.propTypes = propTypes$4;\nBaseNavItem.defaultProps = defaultProps$3;\nBaseNavItem.displayName = 'BaseNavItem';\nvar _excluded$8 = [\"bsPrefix\", \"as\", \"className\", \"eventKey\", \"active\", \"disabled\"];\nvar defaultProps$2 = {\n  disabled: false\n};\nvar SidebarMenuNavLink = /*#__PURE__*/React__default.forwardRef(function (_ref, ref) {\n  var initialBsPrefix = _ref.bsPrefix,\n      _ref$as = _ref.as,\n      As = _ref$as === void 0 ? Anchor : _ref$as,\n      className = _ref.className,\n      eventKey = _ref.eventKey,\n      active = _ref.active,\n      disabled = _ref.disabled,\n      props = _objectWithoutProperties(_ref, _excluded$8);\n\n  var bsPrefix = useBootstrapPrefix(initialBsPrefix, 'sidebar-menu-nav-link');\n\n  var _useContext = useContext(SidebarMenuNodeContext),\n      onActiveKeyChanged = _useContext.onActiveKeyChanged;\n\n  var navContext = useContext(NavContext);\n  var navKey = makeEventKey(eventKey, props.href);\n  var isActive = active == null && navKey != null ? navContext && navContext.activeKey === navKey : active;\n  useEffect(function () {\n    isActive && (onActiveKeyChanged === null || onActiveKeyChanged === void 0 ? void 0 : onActiveKeyChanged(navKey));\n  }, [isActive, navKey, onActiveKeyChanged]);\n  return /*#__PURE__*/React__default.createElement(BaseNavItem, _extends$1({\n    ref: ref,\n    as: As,\n    active: active,\n    eventKey: eventKey,\n    disabled: disabled,\n    className: classNames(className, bsPrefix, disabled && 'disabled')\n  }, props));\n});\nSidebarMenuNavLink.displayName = \"SidebarMenuNavLink\";\nSidebarMenuNavLink.propTypes = NavLink.propTypes;\nSidebarMenuNavLink.defaultProps = defaultProps$2;\nvar rHyphen = /-(.)/g;\n\nfunction camelize(string) {\n  return string.replace(rHyphen, function (_, chr) {\n    return chr.toUpperCase();\n  });\n}\n\nvar pascalCase = function pascalCase(str) {\n  return str[0].toUpperCase() + camelize(str).slice(1);\n}; // TODO: emstricten & fix the typing here! `createWithBsPrefix<TElementType>...`\n\n\nfunction createWithBsPrefix(prefix) {\n  var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref3$displayName = _ref3.displayName,\n      displayName = _ref3$displayName === void 0 ? pascalCase(prefix) : _ref3$displayName,\n      Component = _ref3.Component,\n      defaultProps = _ref3.defaultProps;\n\n  var BsComponent = /*#__PURE__*/React.forwardRef(function (_ref4, ref) {\n    var className = _ref4.className,\n        bsPrefix = _ref4.bsPrefix,\n        _ref4$as = _ref4.as,\n        Tag = _ref4$as === void 0 ? Component || 'div' : _ref4$as,\n        props = _objectWithoutProperties2(_ref4, [\"className\", \"bsPrefix\", \"as\"]);\n\n    var resolvedPrefix = useBootstrapPrefix(bsPrefix, prefix);\n    return /*#__PURE__*/jsxRuntime.exports.jsx(Tag, _objectSpread({\n      ref: ref,\n      className: classNames(className, resolvedPrefix)\n    }, props));\n  });\n  BsComponent.defaultProps = defaultProps;\n  BsComponent.displayName = displayName;\n  return BsComponent;\n}\n\nvar SidebarMenuNavItem = createWithBsPrefix('sidebar-menu-nav-item');\nvar SidebarMenuNavIcon = createWithBsPrefix('sidebar-menu-nav-icon', {\n  displayName: 'SidebarMenuNavIcon',\n  Component: 'span'\n});\nvar SidebarMenuNavTitle = createWithBsPrefix('sidebar-menu-nav-title', {\n  displayName: 'SidebarMenuNavTitle',\n  Component: 'span'\n});\nvar _excluded$7 = [\"bsPrefix\", \"as\", \"className\"];\nvar propTypes$3 = {\n  /** @default 'sidebar-menu-nav' */\n  bsPrefix: PropTypes.string,\n\n  /**\n   * The underlying HTML element to use when rendering the SidebarMenuNav.\n   *\n   * @type {('input'|elementType)}\n   */\n  as: PropTypes.elementType,\n  className: PropTypes.string\n};\nvar SidebarMenuNav = /*#__PURE__*/React__default.forwardRef(function (_ref, ref) {\n  var initialBsPrefix = _ref.bsPrefix,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'div' : _ref$as,\n      className = _ref.className,\n      props = _objectWithoutProperties(_ref, _excluded$7);\n\n  var bsPrefix = useBootstrapPrefix(initialBsPrefix, 'sidebar-menu-nav');\n  return /*#__PURE__*/React__default.createElement(Component, _extends$1({\n    ref: ref\n  }, props, {\n    className: classNames(className, bsPrefix)\n  }));\n});\nSidebarMenuNav.displayName = 'SidebarMenuNav';\nSidebarMenuNav.propTypes = propTypes$3;\nvar SidebarMenuNav$1 = Object.assign(SidebarMenuNav, {\n  Item: SidebarMenuNavItem,\n  Link: SidebarMenuNavLink,\n  Icon: SidebarMenuNavIcon,\n  Title: SidebarMenuNavTitle\n});\nvar _excluded$6 = [\"bsPrefix\"];\nvar SidebarMenuBrand = /*#__PURE__*/React__default.forwardRef(function (_ref, ref) {\n  var initialBsPrefix = _ref.bsPrefix,\n      props = _objectWithoutProperties(_ref, _excluded$6);\n\n  var bsPrefix = useBootstrapPrefix(initialBsPrefix, 'sidebar-menu-brand');\n  return /*#__PURE__*/React__default.createElement(NavbarBrand, _extends$1({\n    ref: ref,\n    bsPrefix: bsPrefix\n  }, props));\n});\nSidebarMenuBrand.displayName = \"SidebarMenuBrand\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\n\nprocess.env.NODE_ENV;\n\nfunction defaultKey(key) {\n  return 'default' + key.charAt(0).toUpperCase() + key.substr(1);\n}\n\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n\n  return typeof key === \"symbol\" ? key : String(key);\n}\n\nfunction _toPrimitive(input, hint) {\n  if (typeof input !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (typeof res !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n\n  return (hint === \"string\" ? String : Number)(input);\n}\n\nfunction useUncontrolledProp(propValue, defaultValue, handler) {\n  var wasPropRef = useRef(propValue !== undefined);\n\n  var _useState = useState(defaultValue),\n      stateValue = _useState[0],\n      setState = _useState[1];\n\n  var isProp = propValue !== undefined;\n  var wasProp = wasPropRef.current;\n  wasPropRef.current = isProp;\n  /**\n   * If a prop switches from controlled to Uncontrolled\n   * reset its value to the defaultValue\n   */\n\n  if (!isProp && wasProp && stateValue !== defaultValue) {\n    setState(defaultValue);\n  }\n\n  return [isProp ? propValue : stateValue, useCallback(function (value) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    if (handler) handler.apply(void 0, [value].concat(args));\n    setState(value);\n  }, [handler])];\n}\n\nfunction useUncontrolled(props, config) {\n  return Object.keys(config).reduce(function (result, fieldName) {\n    var _extends2;\n\n    var _ref = result,\n        defaultValue = _ref[defaultKey(fieldName)],\n        propsValue = _ref[fieldName],\n        rest = _objectWithoutPropertiesLoose(_ref, [defaultKey(fieldName), fieldName].map(_toPropertyKey));\n\n    var handlerName = config[fieldName];\n\n    var _useUncontrolledProp = useUncontrolledProp(propsValue, defaultValue, props[handlerName]),\n        value = _useUncontrolledProp[0],\n        handler = _useUncontrolledProp[1];\n\n    return _extends({}, rest, (_extends2 = {}, _extends2[fieldName] = value, _extends2[handlerName] = handler, _extends2));\n  }, props);\n}\n\nvar context$1 = /*#__PURE__*/React.createContext({});\ncontext$1.displayName = 'SidebarMenuSubContext';\nvar context = /*#__PURE__*/React.createContext(null);\ncontext.displayName = 'NavbarContext';\nvar NavbarContext = context;\nvar defaultProps$1 = {\n  label: 'Toggle navigation'\n};\nvar NavbarToggle = /*#__PURE__*/React.forwardRef(function (_ref5, ref) {\n  var bsPrefix = _ref5.bsPrefix,\n      className = _ref5.className,\n      children = _ref5.children,\n      label = _ref5.label,\n      _ref5$as = _ref5.as,\n      Component = _ref5$as === void 0 ? 'button' : _ref5$as,\n      onClick = _ref5.onClick,\n      props = _objectWithoutProperties2(_ref5, [\"bsPrefix\", \"className\", \"children\", \"label\", \"as\", \"onClick\"]);\n\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'navbar-toggler');\n\n  var _ref6 = useContext(NavbarContext) || {},\n      onToggle = _ref6.onToggle,\n      expanded = _ref6.expanded;\n\n  var handleClick = useEventCallback(function (e) {\n    if (onClick) onClick(e);\n    if (onToggle) onToggle();\n  });\n\n  if (Component === 'button') {\n    props.type = 'button';\n  }\n\n  return /*#__PURE__*/jsxRuntime.exports.jsx(Component, _objectSpread({}, props, {\n    ref: ref,\n    onClick: handleClick,\n    \"aria-label\": label,\n    className: classNames(className, bsPrefix, !expanded && 'collapsed'),\n    children: children || /*#__PURE__*/jsxRuntime.exports.jsx(\"span\", {\n      className: \"\".concat(bsPrefix, \"-icon\")\n    })\n  }));\n});\nNavbarToggle.displayName = 'NavbarToggle';\nNavbarToggle.defaultProps = defaultProps$1;\nvar _excluded$5 = [\"bsPrefix\", \"onClick\", \"className\", \"as\", \"children\", \"label\"];\nvar SidebarMenuSubToggle = /*#__PURE__*/React__default.forwardRef(function (_ref, ref) {\n  var initialBsPrefix = _ref.bsPrefix,\n      onClick = _ref.onClick,\n      className = _ref.className,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'button' : _ref$as,\n      children = _ref.children,\n      label = _ref.label,\n      props = _objectWithoutProperties(_ref, _excluded$5);\n\n  var bsPrefix = useBootstrapPrefix(initialBsPrefix, 'sidebar-menu-sub-toggle');\n\n  var _useContext = useContext(context$1),\n      activeKey = _useContext.activeKey,\n      onSelect = _useContext.onSelect,\n      onToggle = _useContext.onToggle,\n      expanded = _useContext.expanded;\n\n  var _useContext2 = useContext(context$1),\n      eventKey = _useContext2.eventKey;\n\n  var handleOnClick = useMemo(function () {\n    return function () {\n      var eventKeyPassed = eventKey === activeKey ? null : eventKey;\n      onSelect === null || onSelect === void 0 ? void 0 : onSelect(eventKeyPassed);\n    };\n  }, [eventKey, activeKey, onSelect]);\n  var handleClick = useEventCallback(function (e) {\n    onClick === null || onClick === void 0 ? void 0 : onClick(e);\n    onToggle === null || onToggle === void 0 ? void 0 : onToggle();\n    handleOnClick();\n  });\n\n  if (Component === 'button') {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    props.type = 'button';\n  }\n\n  return /*#__PURE__*/React__default.createElement(Component, _extends$1({}, props, {\n    ref: ref,\n    onClick: handleClick,\n    \"aria-label\": label,\n    className: classNames(className, bsPrefix, !expanded && 'collapsed')\n  }), children || /*#__PURE__*/React__default.createElement(\"span\", {\n    className: \"\".concat(bsPrefix, \"-icon\")\n  }));\n});\nSidebarMenuSubToggle.displayName = \"SidebarMenuSubToggle\";\nSidebarMenuSubToggle.propTypes = NavbarToggle.propTypes;\nSidebarMenuSubToggle.defaultProps = NavbarToggle.defaultProps;\nvar _excluded$4 = [\"children\", \"bsPrefix\", \"className\"];\nvar SidebarMenuSubCollapse = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var children = _ref.children,\n      initialBsPrefix = _ref.bsPrefix,\n      className = _ref.className,\n      props = _objectWithoutProperties(_ref, _excluded$4);\n\n  var bsPrefix = useBootstrapPrefix(initialBsPrefix, 'sidebar-menu-sub-collapse');\n  var subContext = useContext(context$1);\n  return /*#__PURE__*/React.createElement(Collapse, _extends$1({\n    \"in\": !!(subContext && subContext.expanded)\n  }, props), /*#__PURE__*/React.createElement(\"div\", {\n    ref: ref,\n    className: classNames(bsPrefix, className)\n  }, children));\n});\nSidebarMenuSubCollapse.displayName = 'SidebarMenuSubCollapse';\nSidebarMenuSubCollapse.propTypes = Collapse.propTypes;\nvar _excluded$3 = [\"with\", \"onActiveKeyChanged\"],\n    _excluded2$2 = [\"activeNodeKey\", \"onNodeSelect\"];\n\nvar SidebarMenuNode = function SidebarMenuNode(_ref) {\n  var With = _ref[\"with\"],\n      onActiveKeyChanged = _ref.onActiveKeyChanged,\n      props = _objectWithoutProperties(_ref, _excluded$3);\n\n  var _useUncontrolled = useUncontrolled(props, {\n    activeNodeKey: 'onNodeSelect'\n  }),\n      activeNodeKey = _useUncontrolled.activeNodeKey,\n      onNodeSelect = _useUncontrolled.onNodeSelect,\n      controlledProps = _objectWithoutProperties(_useUncontrolled, _excluded2$2);\n\n  var nodeContextValue = useMemo(function () {\n    return {\n      onActiveKeyChanged: onActiveKeyChanged,\n      onSelect: onNodeSelect,\n      activeKey: activeNodeKey\n    };\n  }, [activeNodeKey, onActiveKeyChanged, onNodeSelect]);\n  return /*#__PURE__*/React__default.createElement(SidebarMenuNodeContext.Provider, {\n    value: nodeContextValue\n  }, /*#__PURE__*/React__default.createElement(With, controlledProps));\n};\n\nvar _excluded$2 = [\"bsPrefix\", \"as\", \"eventKey\", \"className\"],\n    _excluded2$1 = [\"expanded\", \"onToggle\"];\nvar propTypes$2 = {\n  /**\n   * Set a custom element for this component.\n   */\n  as: PropTypes.elementType,\n\n  /**\n   * A callback fired when the `<SidebarMenuSub>` body collapses or expands. Fired when\n   * a `<SidebarMenuSub.Toggle>` is clicked and called with the new `expanded`\n   * boolean value.\n   *\n   * @controllable expanded\n   */\n  onToggle: PropTypes.func,\n\n  /**\n   * Controls the visiblity of the submenu body\n   *\n   * @controllable onToggle\n   */\n  expanded: PropTypes.bool,\n\n  /**\n   * The ARIA role for the SidebarMenuSub.\n   *\n   * @default 'navigation'\n   */\n  role: PropTypes.string,\n\n  /**\n   * \n   */\n  defaultExpanded: PropTypes.bool\n};\nvar SidebarMenuSub = /*#__PURE__*/React__default.forwardRef(function (_ref, ref) {\n  var _navContext$activeKey;\n\n  var initialBsPrefix = _ref.bsPrefix,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'div' : _ref$as,\n      eventKey = _ref.eventKey,\n      className = _ref.className,\n      props = _objectWithoutProperties(_ref, _excluded$2);\n\n  var _useUncontrolled = useUncontrolled(props, {\n    expanded: 'onToggle'\n  }),\n      expanded = _useUncontrolled.expanded,\n      _onToggle = _useUncontrolled.onToggle,\n      controlledProps = _objectWithoutProperties(_useUncontrolled, _excluded2$1);\n\n  var bsPrefix = useBootstrapPrefix(initialBsPrefix, 'sidebar-menu-sub');\n\n  var _useContext = useContext(SidebarMenuNodeContext),\n      parentNodeActiveKey = _useContext.activeKey,\n      onParentSelect = _useContext.onSelect,\n      onParentActiveKeyChanged = _useContext.onActiveKeyChanged;\n\n  var _useContext2 = useContext(SidebarMenuContext),\n      exclusiveExpand = _useContext2.exclusiveExpand;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      activeKey = _useState2[0],\n      setActiveKey = _useState2[1];\n\n  var navContext = useContext(NavContext);\n  var currentActiveKey = (_navContext$activeKey = navContext === null || navContext === void 0 ? void 0 : navContext.activeKey) !== null && _navContext$activeKey !== void 0 ? _navContext$activeKey : null;\n  var subContextValue = useMemo(function () {\n    return {\n      bsPrefix: bsPrefix,\n      eventKey: eventKey,\n      onSelect: onParentSelect,\n      activeKey: parentNodeActiveKey,\n      onToggle: function onToggle() {\n        return _onToggle === null || _onToggle === void 0 ? void 0 : _onToggle(!expanded);\n      },\n      onActiveKeyChanged: onParentActiveKeyChanged,\n      expanded: exclusiveExpand && typeof eventKey !== 'undefined' ? eventKey === parentNodeActiveKey : !!expanded\n    };\n  }, [bsPrefix, eventKey, exclusiveExpand, expanded, onParentSelect, _onToggle, parentNodeActiveKey, onParentActiveKeyChanged]);\n  var onActiveKeyChanged = useMemo(function () {\n    return createChainedFunction(function (eventKey) {\n      return setActiveKey(eventKey);\n    }, onParentActiveKeyChanged);\n  }, [onParentActiveKeyChanged]);\n  var activeKeyChangedCallback = useMemo(function () {\n    return function (currentActiveKey) {\n      if (currentActiveKey && currentActiveKey === activeKey) {\n        exclusiveExpand ? onParentSelect === null || onParentSelect === void 0 ? void 0 : onParentSelect(eventKey) : _onToggle === null || _onToggle === void 0 ? void 0 : _onToggle(true);\n      }\n    };\n  }, [activeKey, eventKey, exclusiveExpand, onParentSelect, _onToggle]);\n  useEffect(function () {\n    activeKeyChangedCallback(currentActiveKey);\n  }, [currentActiveKey, activeKeyChangedCallback]);\n  return /*#__PURE__*/React__default.createElement(context$1.Provider, {\n    value: subContextValue\n  }, /*#__PURE__*/React__default.createElement(SidebarMenuNode, _extends$1({\n    \"with\": Component,\n    ref: ref,\n    onActiveKeyChanged: onActiveKeyChanged,\n    className: classNames(className, bsPrefix)\n  }, controlledProps)));\n});\nSidebarMenuSub.displayName = \"SidebarMenuSub\";\nSidebarMenuSub.propTypes = propTypes$2;\nvar SidebarMenuSub$1 = Object.assign(SidebarMenuSub, {\n  Collapse: SidebarMenuSubCollapse,\n  Toggle: SidebarMenuSubToggle\n});\nvar SidebarMenuHeader = createWithBsPrefix('sidebar-menu-header', {\n  displayName: 'SidebarMenuHeader',\n  Component: 'div'\n});\nvar SidebarMenuBody = createWithBsPrefix('sidebar-menu-body', {\n  displayName: 'SidebarMenuBody',\n  Component: 'div'\n});\nvar SidebarMenuFooter = createWithBsPrefix('sidebar-menu-footer', {\n  displayName: 'SidebarMenuFooter',\n  Component: 'div'\n});\nvar SidebarMenuText = createWithBsPrefix('sidebar-menu-text', {\n  displayName: 'SidebarMenuText',\n  Component: 'span'\n});\nvar toArray = Function.prototype.bind.call(Function.prototype.call, [].slice);\n/**\n * Runs `querySelectorAll` on a given element.\n * \n * @param element the element\n * @param selector the selector\n */\n\nfunction qsa(element, selector) {\n  return toArray(element.querySelectorAll(selector));\n}\n/**\n * Returns a function that triggers a component update. the hook equivalent to\n * `this.forceUpdate()` in a class component. In most cases using a state value directly\n * is preferable but may be required in some advanced usages of refs for interop or\n * when direct DOM manipulation is required.\n *\n * ```ts\n * const forceUpdate = useForceUpdate();\n *\n * const updateOnClick = useCallback(() => {\n *  forceUpdate()\n * }, [forceUpdate])\n *\n * return <button type=\"button\" onClick={updateOnClick}>Hi there</button>\n * ```\n */\n\n\nfunction useForceUpdate() {\n  // The toggling state value is designed to defeat React optimizations for skipping\n  // updates when they are stricting equal to the last state value\n  var _useReducer = useReducer(function (state) {\n    return !state;\n  }, false),\n      dispatch = _useReducer[1];\n\n  return dispatch;\n}\n\nvar toFnRef = function toFnRef(ref) {\n  return !ref || typeof ref === 'function' ? ref : function (value) {\n    ref.current = value;\n  };\n};\n\nfunction mergeRefs(refA, refB) {\n  var a = toFnRef(refA);\n  var b = toFnRef(refB);\n  return function (value) {\n    if (a) a(value);\n    if (b) b(value);\n  };\n}\n/**\n * Create and returns a single callback ref composed from two other Refs.\n *\n * ```tsx\n * const Button = React.forwardRef((props, ref) => {\n *   const [element, attachRef] = useCallbackRef<HTMLButtonElement>();\n *   const mergedRef = useMergedRefs(ref, attachRef);\n *\n *   return <button ref={mergedRef} {...props}/>\n * })\n * ```\n *\n * @param refA A Callback or mutable Ref\n * @param refB A Callback or mutable Ref\n * @category refs\n */\n\n\nfunction useMergedRefs(refA, refB) {\n  return useMemo(function () {\n    return mergeRefs(refA, refB);\n  }, [refA, refB]);\n}\n\nvar _excluded$1 = [\"as\", \"onSelect\", \"activeKey\", \"onKeyDown\", \"getControlledId\", \"getControllerId\", \"role\"]; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nvar noop = function noop() {\n  /**/\n};\n\nvar propTypes$1 = {\n  onSelect: PropTypes.func,\n  as: PropTypes.elementType,\n  role: PropTypes.string,\n\n  /** @private */\n  onKeyDown: PropTypes.func,\n\n  /** @private */\n  parentOnSelect: PropTypes.func,\n\n  /** @private */\n  getControlledId: PropTypes.func,\n\n  /** @private */\n  getControllerId: PropTypes.func,\n\n  /** @private */\n  activeKey: PropTypes.any\n}; // TODO: is this correct?\n\nvar BaseNav = /*#__PURE__*/React__default.forwardRef(function (_ref, ref) {\n  var _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'ul' : _ref$as,\n      onSelect = _ref.onSelect,\n      activeKey = _ref.activeKey,\n      onKeyDown = _ref.onKeyDown,\n      getControlledId = _ref.getControlledId,\n      getControllerId = _ref.getControllerId,\n      role = _ref.role,\n      props = _objectWithoutProperties(_ref, _excluded$1); // A ref and forceUpdate for refocus, b/c we only want to trigger when needed\n  // and don't want to reset the set in the effect\n\n\n  var forceUpdate = useForceUpdate();\n  var needsRefocusRef = useRef(false);\n  var parentOnSelect = useContext(SelectableContext);\n  var listNode = useRef(null);\n\n  var getNextActiveChild = function getNextActiveChild(offset) {\n    var currentListNode = listNode.current;\n    if (!currentListNode) return null;\n    var items = qsa(currentListNode, '[data-rb-event-key]:not(.disabled)');\n    var activeChild = currentListNode.querySelector('.active');\n    if (!activeChild) return null;\n    var index = items.indexOf(activeChild);\n    if (index === -1) return null;\n    var nextIndex = index + offset;\n    if (nextIndex >= items.length) nextIndex = 0;\n    if (nextIndex < 0) nextIndex = items.length - 1;\n    return items[nextIndex];\n  };\n\n  var handleSelect = function handleSelect(key, event) {\n    if (key == null) return;\n    if (onSelect) onSelect(key, event);\n    if (parentOnSelect) parentOnSelect(key, event);\n  };\n\n  var handleKeyDown = function handleKeyDown(event) {\n    var _nextActiveChild$data;\n\n    if (onKeyDown) {\n      onKeyDown(event);\n    }\n\n    var nextActiveChild;\n\n    switch (event.nativeEvent.key) {\n      case 'ArrowLeft':\n      case 'ArrowUp':\n        nextActiveChild = getNextActiveChild(-1);\n        break;\n\n      case 'ArrowRight':\n      case 'ArrowDown':\n        nextActiveChild = getNextActiveChild(1);\n        break;\n\n      default:\n        return;\n    }\n\n    if (!nextActiveChild) return;\n    event.preventDefault();\n    handleSelect((_nextActiveChild$data = nextActiveChild.dataset.rbEventKey) !== null && _nextActiveChild$data !== void 0 ? _nextActiveChild$data : null, event);\n    needsRefocusRef.current = true;\n    forceUpdate();\n  };\n\n  useEffect(function () {\n    if (listNode.current && needsRefocusRef.current) {\n      var activeChild = listNode.current.querySelector('[data-rb-event-key].active');\n\n      if (activeChild) {\n        activeChild.focus();\n      }\n    }\n\n    needsRefocusRef.current = false;\n  });\n  var mergedRef = useMergedRefs(ref, listNode);\n  return /*#__PURE__*/React__default.createElement(SelectableContext.Provider, {\n    value: handleSelect\n  }, /*#__PURE__*/React__default.createElement(NavContext.Provider, {\n    value: {\n      role: role,\n      // used by NavLink to determine it's role\n      activeKey: makeEventKey(activeKey),\n      getControlledId: getControlledId !== null && getControlledId !== void 0 ? getControlledId : noop,\n      getControllerId: getControllerId !== null && getControllerId !== void 0 ? getControllerId : noop\n    }\n  }, /*#__PURE__*/React__default.createElement(Component, _extends$1({}, props, {\n    onKeyDown: handleKeyDown,\n    ref: mergedRef,\n    role: role\n  }))));\n});\nBaseNav.propTypes = propTypes$1;\nBaseNav.displayName = 'BaseNav';\nvar _excluded = [\"bsPrefix\", \"collapseOnSelect\", \"exclusiveExpand\", \"className\", \"variant\", \"expand\", \"hide\", \"bg\", \"rtl\", \"as\"],\n    _excluded2 = [\"expanded\", \"onSelect\", \"activeKey\", \"onToggle\"];\nvar propTypes = {\n  /** @default 'sidebar-menu' */\n  bsPrefix: PropTypes.string,\n\n  /**\n   * The general visual variant of the SidebarMenu.\n   * Use in combination with the `bg` prop, `background-color` utilities,\n   * or your own background styles.\n   *\n   * @type {('light'|'dark')}\n   */\n  variant: PropTypes.string,\n\n  /**\n   * RTL direction.\n   * \n   * @default false\n   */\n  rtl: PropTypes.bool,\n\n  /**\n   * The breakpoint, below which, the SidebarMenu will collapse.\n   * When `true` the SidebarMenu will always be expanded regardless of screen size.\n   */\n  expand: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['sm', 'md', 'lg', 'xl', 'xxl'])]).isRequired,\n\n  /**\n  * The breakpoint, below which, the SidebarMenu will hide.\n  * When `true` the SidebarMenu will always be hidden regardless of screen size.\n  * \n  * * @default false\n  */\n  hide: PropTypes.oneOf([true, false, 'sm', 'md', 'lg', 'xl', 'xxl']).isRequired,\n\n  /**\n   * Controls the visiblity of the sidebar body\n   *\n   * @controllable onToggle\n   */\n  expanded: PropTypes.bool,\n\n  /**\n   * A convenience prop for adding `bg-*` utility classes since they are so commonly used here.\n   * `light` and `dark` are common choices but any `bg-*` class is supported, including any custom ones you might define.\n   */\n  bg: PropTypes.string,\n\n  /**\n   * Set a custom element for this component.\n   */\n  as: PropTypes.elementType,\n\n  /**\n   * A callback fired when the `<SidebarMenu>` body collapses or expands. Fired when\n   * a `<SidebarMenu.Toggle>` is clicked and called with the new `expanded`\n   * boolean value.\n   *\n   * @controllable expanded\n   */\n  onToggle: PropTypes.func,\n\n  /**\n   * A callback fired when a descendant of a child `<SidebarMenuNav>` is selected. Should\n   * be used to execute complex closing or other miscellaneous actions desired\n   * after selecting a descendant of `<SidebarMenuNav>`. Does nothing if no `<SidebarMenuNav>` or `<SidebarMenuNav>`\n   * descendants exist. The callback is called with an eventKey, which is a\n   * prop from the selected `<SidebarMenuNav>` descendant, and an event.\n   *\n   * ```js\n   * function (\n   *  eventKey: mixed,\n   *  event?: SyntheticEvent\n   * )\n   * ```\n   *\n   * For basic closing behavior after all `<SidebarMenuNav>` descendant onSelect events in\n   * mobile viewports, try using collapseOnSelect.\n   *\n   * Note: If you are manually closing the sidebar using this `OnSelect` prop,\n   * ensure that you are setting `expanded` to false and not *toggling* between\n   * true and false.\n   */\n  onSelect: PropTypes.func,\n\n  /**\n   * Toggles `expanded` to `false` after the onSelect event of a descendant of a\n   * child `<SidebarMenu>` fires. Does nothing if no `<SidebarMenu>` or `<SidebarMenu>` descendants exist.\n   *\n   * Manually controlling `expanded` via the onSelect callback is recommended instead,\n   * for more complex operations that need to be executed after\n   * the `select` event of `<SidebarMenu>` descendants.\n   */\n  collapseOnSelect: PropTypes.bool,\n\n  /**\n   * Only allow one `<SidebarMenu.Sub.Collapse>` open at a time.\n   */\n  exclusiveExpand: PropTypes.bool,\n\n  /**\n   * The ARIA role for the sidebar, will default to 'navigation' for\n   * SidebarMenu whose `as` is something other than `<nav>`.\n   *\n   * @default 'navigation'\n   */\n  role: PropTypes.string,\n\n  /**\n   * Marks the SidebarMenuNavItem with a matching `eventKey` (or `href` if present) as active.\n   */\n  activeKey: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\nvar defaultProps = {\n  rtl: false,\n  expand: true,\n  hide: false,\n  variant: 'light',\n  collapseOnSelect: false,\n  defaultExpanded: true\n};\nvar SidebarMenu = /*#__PURE__*/React__default.forwardRef(function (_ref, ref) {\n  var initialBsPrefix = _ref.bsPrefix,\n      collapseOnSelect = _ref.collapseOnSelect,\n      exclusiveExpand = _ref.exclusiveExpand,\n      className = _ref.className,\n      variant = _ref.variant,\n      expand = _ref.expand,\n      hide = _ref.hide,\n      bg = _ref.bg,\n      rtl = _ref.rtl,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'aside' : _ref$as,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var _useUncontrolled = useUncontrolled(props, {\n    expanded: 'onToggle',\n    activeKey: 'onSelect'\n  }),\n      expanded = _useUncontrolled.expanded,\n      onSelect = _useUncontrolled.onSelect,\n      activeKey = _useUncontrolled.activeKey,\n      _onToggle = _useUncontrolled.onToggle,\n      controlledProps = _objectWithoutProperties(_useUncontrolled, _excluded2);\n\n  var bsPrefix = useBootstrapPrefix(initialBsPrefix, 'sidebar-menu');\n  var handleSelect = useCallback(function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    onSelect === null || onSelect === void 0 ? void 0 : onSelect.apply(void 0, args);\n\n    if (collapseOnSelect && expanded) {\n      _onToggle === null || _onToggle === void 0 ? void 0 : _onToggle(false);\n    }\n  }, [onSelect, collapseOnSelect, expanded, _onToggle]);\n\n  if (controlledProps.role === undefined && Component !== 'nav') {\n    controlledProps.role = 'navigation';\n  }\n\n  var expandClass = \"\".concat(bsPrefix, \"-expand\");\n\n  if (typeof expand === 'string') {\n    expandClass = \"\".concat(expandClass, \"-\").concat(expand);\n  }\n\n  var hideClass = \"\".concat(bsPrefix, \"-hide\");\n\n  if (typeof hide === 'string') {\n    hideClass = \"\".concat(hideClass, \"-\").concat(hide);\n  }\n\n  var sidebarMenuContextValue = useMemo(function () {\n    return {\n      rtl: !!rtl,\n      expanded: !!expanded,\n      onToggle: function onToggle() {\n        return _onToggle === null || _onToggle === void 0 ? void 0 : _onToggle(!expanded);\n      },\n      exclusiveExpand: exclusiveExpand\n    };\n  }, [expanded, _onToggle, rtl, exclusiveExpand]);\n  return /*#__PURE__*/React__default.createElement(SidebarMenuContext.Provider, {\n    value: sidebarMenuContextValue\n  }, /*#__PURE__*/React__default.createElement(SelectableContext.Provider, {\n    value: handleSelect\n  }, /*#__PURE__*/React__default.createElement(SidebarMenuNode, _extends$1({\n    \"with\": BaseNav,\n    as: Component,\n    ref: ref,\n    activeKey: activeKey,\n    className: classNames(className, bsPrefix, hide && hideClass, expand && expandClass, expanded && 'show', rtl && \"\".concat(bsPrefix, \"-rtl\"), variant && \"\".concat(bsPrefix, \"-\").concat(variant), bg && \"bg-\".concat(bg))\n  }, controlledProps))));\n});\nSidebarMenu.displayName = \"SidebarMenu\";\nSidebarMenu.defaultProps = defaultProps;\nSidebarMenu.propTypes = propTypes;\nvar SidebarMenu$1 = Object.assign(SidebarMenu, {\n  Nav: SidebarMenuNav$1,\n  Sub: SidebarMenuSub$1,\n  Brand: SidebarMenuBrand,\n  Collapse: SidebarMenuCollapse,\n  Toggle: SidebarMenuToggle,\n  Header: SidebarMenuHeader,\n  Body: SidebarMenuBody,\n  Footer: SidebarMenuFooter,\n  Text: SidebarMenuText\n});\nexport { SidebarMenuBody, SidebarMenuBrand, SidebarMenuCollapse, SidebarMenuContext, SidebarMenuFooter, SidebarMenuHeader, SidebarMenuNav$1 as SidebarMenuNav, SidebarMenuNavIcon, SidebarMenuNavItem, SidebarMenuNavLink, SidebarMenuNavTitle, SidebarMenuSub$1 as SidebarMenuSub, context$1 as SidebarMenuSubContext, SidebarMenu$1 as default };","map":null,"metadata":{},"sourceType":"module"}