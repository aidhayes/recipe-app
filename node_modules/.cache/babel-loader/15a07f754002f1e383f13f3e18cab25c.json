{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n} // for environments without Set we fallback to arrays with unique members\n\n\nvar SetLike = /*#__PURE__*/function () {\n  function SetLike() {\n    var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n    _classCallCheck(this, SetLike);\n\n    _defineProperty(this, \"items\", void 0);\n\n    this.items = items;\n  }\n\n  _createClass(SetLike, [{\n    key: \"add\",\n    value: function add(value) {\n      if (this.has(value) === false) {\n        this.items.push(value);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.items = [];\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(value) {\n      var previousLength = this.items.length;\n      this.items = this.items.filter(function (item) {\n        return item !== value;\n      });\n      return previousLength !== this.items.length;\n    }\n  }, {\n    key: \"forEach\",\n    value: function forEach(callbackfn) {\n      var _this = this;\n\n      this.items.forEach(function (item) {\n        callbackfn(item, item, _this);\n      });\n    }\n  }, {\n    key: \"has\",\n    value: function has(value) {\n      return this.items.indexOf(value) !== -1;\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this.items.length;\n    }\n  }]);\n\n  return SetLike;\n}();\n\nexport default typeof Set === \"undefined\" ? Set : SetLike;","map":null,"metadata":{},"sourceType":"module"}