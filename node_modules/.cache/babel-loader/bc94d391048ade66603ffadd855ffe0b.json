{"ast":null,"code":"/**\n * implements https://w3c.github.io/accname/\n */\nimport ArrayFrom from \"./polyfills/array.from.mjs\";\nimport SetLike from \"./polyfills/SetLike.mjs\";\nimport { hasAnyConcreteRoles, isElement, isHTMLTableCaptionElement, isHTMLInputElement, isHTMLSelectElement, isHTMLTextAreaElement, safeWindow, isHTMLFieldSetElement, isHTMLLegendElement, isHTMLOptGroupElement, isHTMLTableElement, isHTMLSlotElement, isSVGSVGElement, isSVGTitleElement, queryIdRefs, getLocalName } from \"./util.mjs\";\n/**\n *  A string of characters where all carriage returns, newlines, tabs, and form-feeds are replaced with a single space, and multiple spaces are reduced to a single space. The string contains only character data; it does not contain any markup.\n */\n\n/**\n *\n * @param {string} string -\n * @returns {FlatString} -\n */\n\nfunction asFlatString(s) {\n  return s.trim().replace(/\\s\\s+/g, \" \");\n}\n/**\n *\n * @param node -\n * @param options - These are not optional to prevent accidentally calling it without options in `computeAccessibleName`\n * @returns {boolean} -\n */\n\n\nfunction isHidden(node, getComputedStyleImplementation) {\n  if (!isElement(node)) {\n    return false;\n  }\n\n  if (node.hasAttribute(\"hidden\") || node.getAttribute(\"aria-hidden\") === \"true\") {\n    return true;\n  }\n\n  var style = getComputedStyleImplementation(node);\n  return style.getPropertyValue(\"display\") === \"none\" || style.getPropertyValue(\"visibility\") === \"hidden\";\n}\n/**\n * @param {Node} node -\n * @returns {boolean} - As defined in step 2E of https://w3c.github.io/accname/#mapping_additional_nd_te\n */\n\n\nfunction isControl(node) {\n  return hasAnyConcreteRoles(node, [\"button\", \"combobox\", \"listbox\", \"textbox\"]) || hasAbstractRole(node, \"range\");\n}\n\nfunction hasAbstractRole(node, role) {\n  if (!isElement(node)) {\n    return false;\n  }\n\n  switch (role) {\n    case \"range\":\n      return hasAnyConcreteRoles(node, [\"meter\", \"progressbar\", \"scrollbar\", \"slider\", \"spinbutton\"]);\n\n    default:\n      throw new TypeError(\"No knowledge about abstract role '\".concat(role, \"'. This is likely a bug :(\"));\n  }\n}\n/**\n * element.querySelectorAll but also considers owned tree\n * @param element\n * @param selectors\n */\n\n\nfunction querySelectorAllSubtree(element, selectors) {\n  var elements = ArrayFrom(element.querySelectorAll(selectors));\n  queryIdRefs(element, \"aria-owns\").forEach(function (root) {\n    // babel transpiles this assuming an iterator\n    elements.push.apply(elements, ArrayFrom(root.querySelectorAll(selectors)));\n  });\n  return elements;\n}\n\nfunction querySelectedOptions(listbox) {\n  if (isHTMLSelectElement(listbox)) {\n    // IE11 polyfill\n    return listbox.selectedOptions || querySelectorAllSubtree(listbox, \"[selected]\");\n  }\n\n  return querySelectorAllSubtree(listbox, '[aria-selected=\"true\"]');\n}\n\nfunction isMarkedPresentational(node) {\n  return hasAnyConcreteRoles(node, [\"none\", \"presentation\"]);\n}\n/**\n * Elements specifically listed in html-aam\n *\n * We don't need this for `label` or `legend` elements.\n * Their implicit roles already allow \"naming from content\".\n *\n * sources:\n *\n * - https://w3c.github.io/html-aam/#table-element\n */\n\n\nfunction isNativeHostLanguageTextAlternativeElement(node) {\n  return isHTMLTableCaptionElement(node);\n}\n/**\n * https://w3c.github.io/aria/#namefromcontent\n */\n\n\nfunction allowsNameFromContent(node) {\n  return hasAnyConcreteRoles(node, [\"button\", \"cell\", \"checkbox\", \"columnheader\", \"gridcell\", \"heading\", \"label\", \"legend\", \"link\", \"menuitem\", \"menuitemcheckbox\", \"menuitemradio\", \"option\", \"radio\", \"row\", \"rowheader\", \"switch\", \"tab\", \"tooltip\", \"treeitem\"]);\n}\n/**\n * TODO https://github.com/eps1lon/dom-accessibility-api/issues/100\n */\n\n\nfunction isDescendantOfNativeHostLanguageTextAlternativeElement( // eslint-disable-next-line @typescript-eslint/no-unused-vars -- not implemented yet\nnode) {\n  return false;\n}\n/**\n * TODO https://github.com/eps1lon/dom-accessibility-api/issues/101\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars -- not implemented yet\n\n\nfunction computeTooltipAttributeValue(node) {\n  return null;\n}\n\nfunction getValueOfTextbox(element) {\n  if (isHTMLInputElement(element) || isHTMLTextAreaElement(element)) {\n    return element.value;\n  } // https://github.com/eps1lon/dom-accessibility-api/issues/4\n\n\n  return element.textContent || \"\";\n}\n\nfunction getTextualContent(declaration) {\n  var content = declaration.getPropertyValue(\"content\");\n\n  if (/^[\"'].*[\"']$/.test(content)) {\n    return content.slice(1, -1);\n  }\n\n  return \"\";\n}\n/**\n * https://html.spec.whatwg.org/multipage/forms.html#category-label\n * TODO: form-associated custom elements\n * @param element\n */\n\n\nfunction isLabelableElement(element) {\n  var localName = getLocalName(element);\n  return localName === \"button\" || localName === \"input\" && element.getAttribute(\"type\") !== \"hidden\" || localName === \"meter\" || localName === \"output\" || localName === \"progress\" || localName === \"select\" || localName === \"textarea\";\n}\n/**\n * > [...], then the first such descendant in tree order is the label element's labeled control.\n * -- https://html.spec.whatwg.org/multipage/forms.html#labeled-control\n * @param element\n */\n\n\nfunction findLabelableElement(element) {\n  if (isLabelableElement(element)) {\n    return element;\n  }\n\n  var labelableElement = null;\n  element.childNodes.forEach(function (childNode) {\n    if (labelableElement === null && isElement(childNode)) {\n      var descendantLabelableElement = findLabelableElement(childNode);\n\n      if (descendantLabelableElement !== null) {\n        labelableElement = descendantLabelableElement;\n      }\n    }\n  });\n  return labelableElement;\n}\n/**\n * Polyfill of HTMLLabelElement.control\n * https://html.spec.whatwg.org/multipage/forms.html#labeled-control\n * @param label\n */\n\n\nfunction getControlOfLabel(label) {\n  if (label.control !== undefined) {\n    return label.control;\n  }\n\n  var htmlFor = label.getAttribute(\"for\");\n\n  if (htmlFor !== null) {\n    return label.ownerDocument.getElementById(htmlFor);\n  }\n\n  return findLabelableElement(label);\n}\n/**\n * Polyfill of HTMLInputElement.labels\n * https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/labels\n * @param element\n */\n\n\nfunction getLabels(element) {\n  var labelsProperty = element.labels;\n\n  if (labelsProperty === null) {\n    return labelsProperty;\n  }\n\n  if (labelsProperty !== undefined) {\n    return ArrayFrom(labelsProperty);\n  } // polyfill\n\n\n  if (!isLabelableElement(element)) {\n    return null;\n  }\n\n  var document = element.ownerDocument;\n  return ArrayFrom(document.querySelectorAll(\"label\")).filter(function (label) {\n    return getControlOfLabel(label) === element;\n  });\n}\n/**\n * Gets the contents of a slot used for computing the accname\n * @param slot\n */\n\n\nfunction getSlotContents(slot) {\n  // Computing the accessible name for elements containing slots is not\n  // currently defined in the spec. This implementation reflects the\n  // behavior of NVDA 2020.2/Firefox 81 and iOS VoiceOver/Safari 13.6.\n  var assignedNodes = slot.assignedNodes();\n\n  if (assignedNodes.length === 0) {\n    // if no nodes are assigned to the slot, it displays the default content\n    return ArrayFrom(slot.childNodes);\n  }\n\n  return assignedNodes;\n}\n/**\n * implements https://w3c.github.io/accname/#mapping_additional_nd_te\n * @param root\n * @param options\n * @returns\n */\n\n\nexport function computeTextAlternative(root) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var consultedNodes = new SetLike();\n  var window = safeWindow(root);\n  var _options$compute = options.compute,\n      compute = _options$compute === void 0 ? \"name\" : _options$compute,\n      _options$computedStyl = options.computedStyleSupportsPseudoElements,\n      computedStyleSupportsPseudoElements = _options$computedStyl === void 0 ? options.getComputedStyle !== undefined : _options$computedStyl,\n      _options$getComputedS = options.getComputedStyle,\n      getComputedStyle = _options$getComputedS === void 0 ? window.getComputedStyle.bind(window) : _options$getComputedS,\n      _options$hidden = options.hidden,\n      hidden = _options$hidden === void 0 ? false : _options$hidden; // 2F.i\n\n  function computeMiscTextAlternative(node, context) {\n    var accumulatedText = \"\";\n\n    if (isElement(node) && computedStyleSupportsPseudoElements) {\n      var pseudoBefore = getComputedStyle(node, \"::before\");\n      var beforeContent = getTextualContent(pseudoBefore);\n      accumulatedText = \"\".concat(beforeContent, \" \").concat(accumulatedText);\n    } // FIXME: Including aria-owns is not defined in the spec\n    // But it is required in the web-platform-test\n\n\n    var childNodes = isHTMLSlotElement(node) ? getSlotContents(node) : ArrayFrom(node.childNodes).concat(queryIdRefs(node, \"aria-owns\"));\n    childNodes.forEach(function (child) {\n      var result = computeTextAlternative(child, {\n        isEmbeddedInLabel: context.isEmbeddedInLabel,\n        isReferenced: false,\n        recursion: true\n      }); // TODO: Unclear why display affects delimiter\n      // see https://github.com/w3c/accname/issues/3\n\n      var display = isElement(child) ? getComputedStyle(child).getPropertyValue(\"display\") : \"inline\";\n      var separator = display !== \"inline\" ? \" \" : \"\"; // trailing separator for wpt tests\n\n      accumulatedText += \"\".concat(separator).concat(result).concat(separator);\n    });\n\n    if (isElement(node) && computedStyleSupportsPseudoElements) {\n      var pseudoAfter = getComputedStyle(node, \"::after\");\n      var afterContent = getTextualContent(pseudoAfter);\n      accumulatedText = \"\".concat(accumulatedText, \" \").concat(afterContent);\n    }\n\n    return accumulatedText.trim();\n  }\n\n  function computeElementTextAlternative(node) {\n    if (!isElement(node)) {\n      return null;\n    }\n    /**\n     *\n     * @param element\n     * @param attributeName\n     * @returns A string non-empty string or `null`\n     */\n\n\n    function useAttribute(element, attributeName) {\n      var attribute = element.getAttributeNode(attributeName);\n\n      if (attribute !== null && !consultedNodes.has(attribute) && attribute.value.trim() !== \"\") {\n        consultedNodes.add(attribute);\n        return attribute.value;\n      }\n\n      return null;\n    } // https://w3c.github.io/html-aam/#fieldset-and-legend-elements\n\n\n    if (isHTMLFieldSetElement(node)) {\n      consultedNodes.add(node);\n      var children = ArrayFrom(node.childNodes);\n\n      for (var i = 0; i < children.length; i += 1) {\n        var child = children[i];\n\n        if (isHTMLLegendElement(child)) {\n          return computeTextAlternative(child, {\n            isEmbeddedInLabel: false,\n            isReferenced: false,\n            recursion: false\n          });\n        }\n      }\n    } else if (isHTMLTableElement(node)) {\n      // https://w3c.github.io/html-aam/#table-element\n      consultedNodes.add(node);\n\n      var _children = ArrayFrom(node.childNodes);\n\n      for (var _i = 0; _i < _children.length; _i += 1) {\n        var _child = _children[_i];\n\n        if (isHTMLTableCaptionElement(_child)) {\n          return computeTextAlternative(_child, {\n            isEmbeddedInLabel: false,\n            isReferenced: false,\n            recursion: false\n          });\n        }\n      }\n    } else if (isSVGSVGElement(node)) {\n      // https://www.w3.org/TR/svg-aam-1.0/\n      consultedNodes.add(node);\n\n      var _children2 = ArrayFrom(node.childNodes);\n\n      for (var _i2 = 0; _i2 < _children2.length; _i2 += 1) {\n        var _child2 = _children2[_i2];\n\n        if (isSVGTitleElement(_child2)) {\n          return _child2.textContent;\n        }\n      }\n\n      return null;\n    } else if (getLocalName(node) === \"img\" || getLocalName(node) === \"area\") {\n      // https://w3c.github.io/html-aam/#area-element\n      // https://w3c.github.io/html-aam/#img-element\n      var nameFromAlt = useAttribute(node, \"alt\");\n\n      if (nameFromAlt !== null) {\n        return nameFromAlt;\n      }\n    } else if (isHTMLOptGroupElement(node)) {\n      var nameFromLabel = useAttribute(node, \"label\");\n\n      if (nameFromLabel !== null) {\n        return nameFromLabel;\n      }\n    }\n\n    if (isHTMLInputElement(node) && (node.type === \"button\" || node.type === \"submit\" || node.type === \"reset\")) {\n      // https://w3c.github.io/html-aam/#input-type-text-input-type-password-input-type-search-input-type-tel-input-type-email-input-type-url-and-textarea-element-accessible-description-computation\n      var nameFromValue = useAttribute(node, \"value\");\n\n      if (nameFromValue !== null) {\n        return nameFromValue;\n      } // TODO: l10n\n\n\n      if (node.type === \"submit\") {\n        return \"Submit\";\n      } // TODO: l10n\n\n\n      if (node.type === \"reset\") {\n        return \"Reset\";\n      }\n    }\n\n    var labels = getLabels(node);\n\n    if (labels !== null && labels.length !== 0) {\n      consultedNodes.add(node);\n      return ArrayFrom(labels).map(function (element) {\n        return computeTextAlternative(element, {\n          isEmbeddedInLabel: true,\n          isReferenced: false,\n          recursion: true\n        });\n      }).filter(function (label) {\n        return label.length > 0;\n      }).join(\" \");\n    } // https://w3c.github.io/html-aam/#input-type-image-accessible-name-computation\n    // TODO: wpt test consider label elements but html-aam does not mention them\n    // We follow existing implementations over spec\n\n\n    if (isHTMLInputElement(node) && node.type === \"image\") {\n      var _nameFromAlt = useAttribute(node, \"alt\");\n\n      if (_nameFromAlt !== null) {\n        return _nameFromAlt;\n      }\n\n      var nameFromTitle = useAttribute(node, \"title\");\n\n      if (nameFromTitle !== null) {\n        return nameFromTitle;\n      } // TODO: l10n\n\n\n      return \"Submit Query\";\n    }\n\n    if (hasAnyConcreteRoles(node, [\"button\"])) {\n      // https://www.w3.org/TR/html-aam-1.0/#button-element\n      var nameFromSubTree = computeMiscTextAlternative(node, {\n        isEmbeddedInLabel: false,\n        isReferenced: false\n      });\n\n      if (nameFromSubTree !== \"\") {\n        return nameFromSubTree;\n      }\n\n      return useAttribute(node, \"title\");\n    }\n\n    return useAttribute(node, \"title\");\n  }\n\n  function computeTextAlternative(current, context) {\n    if (consultedNodes.has(current)) {\n      return \"\";\n    } // 2A\n\n\n    if (!hidden && isHidden(current, getComputedStyle) && !context.isReferenced) {\n      consultedNodes.add(current);\n      return \"\";\n    } // 2B\n\n\n    var labelElements = queryIdRefs(current, \"aria-labelledby\");\n\n    if (compute === \"name\" && !context.isReferenced && labelElements.length > 0) {\n      return labelElements.map(function (element) {\n        return computeTextAlternative(element, {\n          isEmbeddedInLabel: context.isEmbeddedInLabel,\n          isReferenced: true,\n          // thais isn't recursion as specified, otherwise we would skip\n          // `aria-label` in\n          // <input id=\"myself\" aria-label=\"foo\" aria-labelledby=\"myself\"\n          recursion: false\n        });\n      }).join(\" \");\n    } // 2C\n    // Changed from the spec in anticipation of https://github.com/w3c/accname/issues/64\n    // spec says we should only consider skipping if we have a non-empty label\n\n\n    var skipToStep2E = context.recursion && isControl(current) && compute === \"name\";\n\n    if (!skipToStep2E) {\n      var ariaLabel = (isElement(current) && current.getAttribute(\"aria-label\") || \"\").trim();\n\n      if (ariaLabel !== \"\" && compute === \"name\") {\n        consultedNodes.add(current);\n        return ariaLabel;\n      } // 2D\n\n\n      if (!isMarkedPresentational(current)) {\n        var elementTextAlternative = computeElementTextAlternative(current);\n\n        if (elementTextAlternative !== null) {\n          consultedNodes.add(current);\n          return elementTextAlternative;\n        }\n      }\n    } // special casing, cheating to make tests pass\n    // https://github.com/w3c/accname/issues/67\n\n\n    if (hasAnyConcreteRoles(current, [\"menu\"])) {\n      consultedNodes.add(current);\n      return \"\";\n    } // 2E\n\n\n    if (skipToStep2E || context.isEmbeddedInLabel || context.isReferenced) {\n      if (hasAnyConcreteRoles(current, [\"combobox\", \"listbox\"])) {\n        consultedNodes.add(current);\n        var selectedOptions = querySelectedOptions(current);\n\n        if (selectedOptions.length === 0) {\n          // defined per test `name_heading_combobox`\n          return isHTMLInputElement(current) ? current.value : \"\";\n        }\n\n        return ArrayFrom(selectedOptions).map(function (selectedOption) {\n          return computeTextAlternative(selectedOption, {\n            isEmbeddedInLabel: context.isEmbeddedInLabel,\n            isReferenced: false,\n            recursion: true\n          });\n        }).join(\" \");\n      }\n\n      if (hasAbstractRole(current, \"range\")) {\n        consultedNodes.add(current);\n\n        if (current.hasAttribute(\"aria-valuetext\")) {\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- safe due to hasAttribute guard\n          return current.getAttribute(\"aria-valuetext\");\n        }\n\n        if (current.hasAttribute(\"aria-valuenow\")) {\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- safe due to hasAttribute guard\n          return current.getAttribute(\"aria-valuenow\");\n        } // Otherwise, use the value as specified by a host language attribute.\n\n\n        return current.getAttribute(\"value\") || \"\";\n      }\n\n      if (hasAnyConcreteRoles(current, [\"textbox\"])) {\n        consultedNodes.add(current);\n        return getValueOfTextbox(current);\n      }\n    } // 2F: https://w3c.github.io/accname/#step2F\n\n\n    if (allowsNameFromContent(current) || isElement(current) && context.isReferenced || isNativeHostLanguageTextAlternativeElement(current) || isDescendantOfNativeHostLanguageTextAlternativeElement(current)) {\n      consultedNodes.add(current);\n      return computeMiscTextAlternative(current, {\n        isEmbeddedInLabel: context.isEmbeddedInLabel,\n        isReferenced: false\n      });\n    }\n\n    if (current.nodeType === current.TEXT_NODE) {\n      consultedNodes.add(current);\n      return current.textContent || \"\";\n    }\n\n    if (context.recursion) {\n      consultedNodes.add(current);\n      return computeMiscTextAlternative(current, {\n        isEmbeddedInLabel: context.isEmbeddedInLabel,\n        isReferenced: false\n      });\n    }\n\n    var tooltipAttributeValue = computeTooltipAttributeValue(current);\n\n    if (tooltipAttributeValue !== null) {\n      consultedNodes.add(current);\n      return tooltipAttributeValue;\n    } // TODO should this be reachable?\n\n\n    consultedNodes.add(current);\n    return \"\";\n  }\n\n  return asFlatString(computeTextAlternative(root, {\n    isEmbeddedInLabel: false,\n    // by spec computeAccessibleDescription starts with the referenced elements as roots\n    isReferenced: compute === \"description\",\n    recursion: false\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}