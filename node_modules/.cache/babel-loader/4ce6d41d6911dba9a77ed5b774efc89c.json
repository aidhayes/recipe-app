{"ast":null,"code":"'use strict';\n\nvar _toConsumableArray = require(\"/Users/aidan/recipe-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _inherits = require(\"/Users/aidan/recipe-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _setPrototypeOf = require(\"/Users/aidan/recipe-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/setPrototypeOf\");\n\nvar _slicedToArray = require(\"/Users/aidan/recipe-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nfunction _wrapRegExp() { _wrapRegExp = function _wrapRegExp(re, groups) { return new BabelRegExp(re, void 0, groups); }; var _super = RegExp.prototype, _groups = new WeakMap(); function BabelRegExp(re, flags, groups) { var _this = new RegExp(re, flags); return _groups.set(_this, groups || _groups.get(re)), _setPrototypeOf(_this, BabelRegExp.prototype); } function buildGroups(result, re) { var g = _groups.get(re); return Object.keys(g).reduce(function (groups, name) { var i = g[name]; if (\"number\" == typeof i) groups[name] = result[i];else { for (var k = 0; void 0 === result[i[k]] && k + 1 < i.length;) { k++; } groups[name] = result[i[k]]; } return groups; }, Object.create(null)); } return _inherits(BabelRegExp, RegExp), BabelRegExp.prototype.exec = function (str) { var result = _super.exec.call(this, str); return result && (result.groups = buildGroups(result, this)), result; }, BabelRegExp.prototype[Symbol.replace] = function (str, substitution) { if (\"string\" == typeof substitution) { var groups = _groups.get(this); return _super[Symbol.replace].call(this, str, substitution.replace(/\\$<([^>]+)>/g, function (_, name) { return \"$\" + groups[name]; })); } if (\"function\" == typeof substitution) { var _this = this; return _super[Symbol.replace].call(this, str, function () { var args = arguments; return \"object\" != typeof args[args.length - 1] && (args = [].slice.call(args)).push(buildGroups(args, _this)), substitution.apply(this, args); }); } return _super[Symbol.replace].call(this, str, substitution); }, _wrapRegExp.apply(this, arguments); }\n\nvar ANSI_BACKGROUND_OFFSET = 10;\n\nvar wrapAnsi256 = function wrapAnsi256() {\n  var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  return function (code) {\n    return \"\\x1B[\".concat(38 + offset, \";5;\").concat(code, \"m\");\n  };\n};\n\nvar wrapAnsi16m = function wrapAnsi16m() {\n  var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  return function (red, green, blue) {\n    return \"\\x1B[\".concat(38 + offset, \";2;\").concat(red, \";\").concat(green, \";\").concat(blue, \"m\");\n  };\n};\n\nfunction assembleStyles() {\n  var codes = new Map();\n  var styles = {\n    modifier: {\n      reset: [0, 0],\n      // 21 isn't widely supported and 22 does the same thing\n      bold: [1, 22],\n      dim: [2, 22],\n      italic: [3, 23],\n      underline: [4, 24],\n      overline: [53, 55],\n      inverse: [7, 27],\n      hidden: [8, 28],\n      strikethrough: [9, 29]\n    },\n    color: {\n      black: [30, 39],\n      red: [31, 39],\n      green: [32, 39],\n      yellow: [33, 39],\n      blue: [34, 39],\n      magenta: [35, 39],\n      cyan: [36, 39],\n      white: [37, 39],\n      // Bright color\n      blackBright: [90, 39],\n      redBright: [91, 39],\n      greenBright: [92, 39],\n      yellowBright: [93, 39],\n      blueBright: [94, 39],\n      magentaBright: [95, 39],\n      cyanBright: [96, 39],\n      whiteBright: [97, 39]\n    },\n    bgColor: {\n      bgBlack: [40, 49],\n      bgRed: [41, 49],\n      bgGreen: [42, 49],\n      bgYellow: [43, 49],\n      bgBlue: [44, 49],\n      bgMagenta: [45, 49],\n      bgCyan: [46, 49],\n      bgWhite: [47, 49],\n      // Bright color\n      bgBlackBright: [100, 49],\n      bgRedBright: [101, 49],\n      bgGreenBright: [102, 49],\n      bgYellowBright: [103, 49],\n      bgBlueBright: [104, 49],\n      bgMagentaBright: [105, 49],\n      bgCyanBright: [106, 49],\n      bgWhiteBright: [107, 49]\n    }\n  }; // Alias bright black as gray (and grey)\n\n  styles.color.gray = styles.color.blackBright;\n  styles.bgColor.bgGray = styles.bgColor.bgBlackBright;\n  styles.color.grey = styles.color.blackBright;\n  styles.bgColor.bgGrey = styles.bgColor.bgBlackBright;\n\n  for (var _i = 0, _Object$entries = Object.entries(styles); _i < _Object$entries.length; _i++) {\n    var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n        groupName = _Object$entries$_i[0],\n        group = _Object$entries$_i[1];\n\n    for (var _i2 = 0, _Object$entries2 = Object.entries(group); _i2 < _Object$entries2.length; _i2++) {\n      var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i2], 2),\n          styleName = _Object$entries2$_i[0],\n          style = _Object$entries2$_i[1];\n\n      styles[styleName] = {\n        open: \"\\x1B[\".concat(style[0], \"m\"),\n        close: \"\\x1B[\".concat(style[1], \"m\")\n      };\n      group[styleName] = styles[styleName];\n      codes.set(style[0], style[1]);\n    }\n\n    Object.defineProperty(styles, groupName, {\n      value: group,\n      enumerable: false\n    });\n  }\n\n  Object.defineProperty(styles, 'codes', {\n    value: codes,\n    enumerable: false\n  });\n  styles.color.close = \"\\x1B[39m\";\n  styles.bgColor.close = \"\\x1B[49m\";\n  styles.color.ansi256 = wrapAnsi256();\n  styles.color.ansi16m = wrapAnsi16m();\n  styles.bgColor.ansi256 = wrapAnsi256(ANSI_BACKGROUND_OFFSET);\n  styles.bgColor.ansi16m = wrapAnsi16m(ANSI_BACKGROUND_OFFSET); // From https://github.com/Qix-/color-convert/blob/3f0e0d4e92e235796ccb17f6e85c72094a651f49/conversions.js\n\n  Object.defineProperties(styles, {\n    rgbToAnsi256: {\n      value: function value(red, green, blue) {\n        // We use the extended greyscale palette here, with the exception of\n        // black and white. normal palette only has 4 greyscale shades.\n        if (red === green && green === blue) {\n          if (red < 8) {\n            return 16;\n          }\n\n          if (red > 248) {\n            return 231;\n          }\n\n          return Math.round((red - 8) / 247 * 24) + 232;\n        }\n\n        return 16 + 36 * Math.round(red / 255 * 5) + 6 * Math.round(green / 255 * 5) + Math.round(blue / 255 * 5);\n      },\n      enumerable: false\n    },\n    hexToRgb: {\n      value: function value(hex) {\n        var matches = /*#__PURE__*/_wrapRegExp(/([a-f\\d]{6}|[a-f\\d]{3})/i, {\n          colorString: 1\n        }).exec(hex.toString(16));\n\n        if (!matches) {\n          return [0, 0, 0];\n        }\n\n        var colorString = matches.groups.colorString;\n\n        if (colorString.length === 3) {\n          colorString = colorString.split('').map(function (character) {\n            return character + character;\n          }).join('');\n        }\n\n        var integer = Number.parseInt(colorString, 16);\n        return [integer >> 16 & 0xFF, integer >> 8 & 0xFF, integer & 0xFF];\n      },\n      enumerable: false\n    },\n    hexToAnsi256: {\n      value: function value(hex) {\n        return styles.rgbToAnsi256.apply(styles, _toConsumableArray(styles.hexToRgb(hex)));\n      },\n      enumerable: false\n    }\n  });\n  return styles;\n} // Make the export immutable\n\n\nObject.defineProperty(module, 'exports', {\n  enumerable: true,\n  get: assembleStyles\n});","map":null,"metadata":{},"sourceType":"script"}