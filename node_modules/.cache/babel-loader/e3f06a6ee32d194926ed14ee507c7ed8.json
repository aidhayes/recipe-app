{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.printIteratorEntries = printIteratorEntries;\nexports.printIteratorValues = printIteratorValues;\nexports.printListItems = printListItems;\nexports.printObjectProperties = printObjectProperties;\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nvar getKeysOfEnumerableProperties = function getKeysOfEnumerableProperties(object, compareKeys) {\n  var keys = Object.keys(object).sort(compareKeys);\n\n  if (Object.getOwnPropertySymbols) {\n    Object.getOwnPropertySymbols(object).forEach(function (symbol) {\n      if (Object.getOwnPropertyDescriptor(object, symbol).enumerable) {\n        keys.push(symbol);\n      }\n    });\n  }\n\n  return keys;\n};\n/**\n * Return entries (for example, of a map)\n * with spacing, indentation, and comma\n * without surrounding punctuation (for example, braces)\n */\n\n\nfunction printIteratorEntries(iterator, config, indentation, depth, refs, printer) {\n  var separator = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : ': ';\n  var result = '';\n  var current = iterator.next();\n\n  if (!current.done) {\n    result += config.spacingOuter;\n    var indentationNext = indentation + config.indent;\n\n    while (!current.done) {\n      var name = printer(current.value[0], config, indentationNext, depth, refs);\n      var value = printer(current.value[1], config, indentationNext, depth, refs);\n      result += indentationNext + name + separator + value;\n      current = iterator.next();\n\n      if (!current.done) {\n        result += ',' + config.spacingInner;\n      } else if (!config.min) {\n        result += ',';\n      }\n    }\n\n    result += config.spacingOuter + indentation;\n  }\n\n  return result;\n}\n/**\n * Return values (for example, of a set)\n * with spacing, indentation, and comma\n * without surrounding punctuation (braces or brackets)\n */\n\n\nfunction printIteratorValues(iterator, config, indentation, depth, refs, printer) {\n  var result = '';\n  var current = iterator.next();\n\n  if (!current.done) {\n    result += config.spacingOuter;\n    var indentationNext = indentation + config.indent;\n\n    while (!current.done) {\n      result += indentationNext + printer(current.value, config, indentationNext, depth, refs);\n      current = iterator.next();\n\n      if (!current.done) {\n        result += ',' + config.spacingInner;\n      } else if (!config.min) {\n        result += ',';\n      }\n    }\n\n    result += config.spacingOuter + indentation;\n  }\n\n  return result;\n}\n/**\n * Return items (for example, of an array)\n * with spacing, indentation, and comma\n * without surrounding punctuation (for example, brackets)\n **/\n\n\nfunction printListItems(list, config, indentation, depth, refs, printer) {\n  var result = '';\n\n  if (list.length) {\n    result += config.spacingOuter;\n    var indentationNext = indentation + config.indent;\n\n    for (var i = 0; i < list.length; i++) {\n      result += indentationNext;\n\n      if (i in list) {\n        result += printer(list[i], config, indentationNext, depth, refs);\n      }\n\n      if (i < list.length - 1) {\n        result += ',' + config.spacingInner;\n      } else if (!config.min) {\n        result += ',';\n      }\n    }\n\n    result += config.spacingOuter + indentation;\n  }\n\n  return result;\n}\n/**\n * Return properties of an object\n * with spacing, indentation, and comma\n * without surrounding punctuation (for example, braces)\n */\n\n\nfunction printObjectProperties(val, config, indentation, depth, refs, printer) {\n  var result = '';\n  var keys = getKeysOfEnumerableProperties(val, config.compareKeys);\n\n  if (keys.length) {\n    result += config.spacingOuter;\n    var indentationNext = indentation + config.indent;\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      var name = printer(key, config, indentationNext, depth, refs);\n      var value = printer(val[key], config, indentationNext, depth, refs);\n      result += indentationNext + name + ': ' + value;\n\n      if (i < keys.length - 1) {\n        result += ',' + config.spacingInner;\n      } else if (!config.min) {\n        result += ',';\n      }\n    }\n\n    result += config.spacingOuter + indentation;\n  }\n\n  return result;\n}","map":null,"metadata":{},"sourceType":"script"}